
ROS2_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006224  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080063c4  080063c4  000073c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08006444  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  20000088  080064cc  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004d4  080064cc  000084d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d62e  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dcd  00000000  00000000  000156e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  000174b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ec  00000000  00000000  00018158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001649c  00000000  00000000  00018b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e889  00000000  00000000  0002efe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008daaa  00000000  00000000  0003d869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb313  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  000cb358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000ceef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080063ac 	.word	0x080063ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	080063ac 	.word	0x080063ac

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	@ 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2iz>:
 800085c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000864:	d215      	bcs.n	8000892 <__aeabi_d2iz+0x36>
 8000866:	d511      	bpl.n	800088c <__aeabi_d2iz+0x30>
 8000868:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d912      	bls.n	8000898 <__aeabi_d2iz+0x3c>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000882:	fa23 f002 	lsr.w	r0, r3, r2
 8000886:	bf18      	it	ne
 8000888:	4240      	negne	r0, r0
 800088a:	4770      	bx	lr
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	4770      	bx	lr
 8000892:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000896:	d105      	bne.n	80008a4 <__aeabi_d2iz+0x48>
 8000898:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800089c:	bf08      	it	eq
 800089e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80008a2:	4770      	bx	lr
 80008a4:	f04f 0000 	mov.w	r0, #0
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop

080008ac <__aeabi_d2f>:
 80008ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008b4:	bf24      	itt	cs
 80008b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008be:	d90d      	bls.n	80008dc <__aeabi_d2f+0x30>
 80008c0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008cc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008d4:	bf08      	it	eq
 80008d6:	f020 0001 	biceq.w	r0, r0, #1
 80008da:	4770      	bx	lr
 80008dc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008e0:	d121      	bne.n	8000926 <__aeabi_d2f+0x7a>
 80008e2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008e6:	bfbc      	itt	lt
 80008e8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008ec:	4770      	bxlt	lr
 80008ee:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008f6:	f1c2 0218 	rsb	r2, r2, #24
 80008fa:	f1c2 0c20 	rsb	ip, r2, #32
 80008fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000902:	fa20 f002 	lsr.w	r0, r0, r2
 8000906:	bf18      	it	ne
 8000908:	f040 0001 	orrne.w	r0, r0, #1
 800090c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000910:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000914:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000918:	ea40 000c 	orr.w	r0, r0, ip
 800091c:	fa23 f302 	lsr.w	r3, r3, r2
 8000920:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x14>
 8000926:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800092a:	d107      	bne.n	800093c <__aeabi_d2f+0x90>
 800092c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000930:	bf1e      	ittt	ne
 8000932:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000936:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800093a:	4770      	bxne	lr
 800093c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000940:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000944:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_uldivmod>:
 800094c:	b953      	cbnz	r3, 8000964 <__aeabi_uldivmod+0x18>
 800094e:	b94a      	cbnz	r2, 8000964 <__aeabi_uldivmod+0x18>
 8000950:	2900      	cmp	r1, #0
 8000952:	bf08      	it	eq
 8000954:	2800      	cmpeq	r0, #0
 8000956:	bf1c      	itt	ne
 8000958:	f04f 31ff 	movne.w	r1, #4294967295
 800095c:	f04f 30ff 	movne.w	r0, #4294967295
 8000960:	f000 b96a 	b.w	8000c38 <__aeabi_idiv0>
 8000964:	f1ad 0c08 	sub.w	ip, sp, #8
 8000968:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800096c:	f000 f806 	bl	800097c <__udivmoddi4>
 8000970:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000974:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000978:	b004      	add	sp, #16
 800097a:	4770      	bx	lr

0800097c <__udivmoddi4>:
 800097c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000980:	9d08      	ldr	r5, [sp, #32]
 8000982:	460c      	mov	r4, r1
 8000984:	2b00      	cmp	r3, #0
 8000986:	d14e      	bne.n	8000a26 <__udivmoddi4+0xaa>
 8000988:	4694      	mov	ip, r2
 800098a:	458c      	cmp	ip, r1
 800098c:	4686      	mov	lr, r0
 800098e:	fab2 f282 	clz	r2, r2
 8000992:	d962      	bls.n	8000a5a <__udivmoddi4+0xde>
 8000994:	b14a      	cbz	r2, 80009aa <__udivmoddi4+0x2e>
 8000996:	f1c2 0320 	rsb	r3, r2, #32
 800099a:	4091      	lsls	r1, r2
 800099c:	fa20 f303 	lsr.w	r3, r0, r3
 80009a0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009a4:	4319      	orrs	r1, r3
 80009a6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ae:	fa1f f68c 	uxth.w	r6, ip
 80009b2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ba:	fb07 1114 	mls	r1, r7, r4, r1
 80009be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009c2:	fb04 f106 	mul.w	r1, r4, r6
 80009c6:	4299      	cmp	r1, r3
 80009c8:	d90a      	bls.n	80009e0 <__udivmoddi4+0x64>
 80009ca:	eb1c 0303 	adds.w	r3, ip, r3
 80009ce:	f104 30ff 	add.w	r0, r4, #4294967295
 80009d2:	f080 8112 	bcs.w	8000bfa <__udivmoddi4+0x27e>
 80009d6:	4299      	cmp	r1, r3
 80009d8:	f240 810f 	bls.w	8000bfa <__udivmoddi4+0x27e>
 80009dc:	3c02      	subs	r4, #2
 80009de:	4463      	add	r3, ip
 80009e0:	1a59      	subs	r1, r3, r1
 80009e2:	fa1f f38e 	uxth.w	r3, lr
 80009e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009ea:	fb07 1110 	mls	r1, r7, r0, r1
 80009ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009f2:	fb00 f606 	mul.w	r6, r0, r6
 80009f6:	429e      	cmp	r6, r3
 80009f8:	d90a      	bls.n	8000a10 <__udivmoddi4+0x94>
 80009fa:	eb1c 0303 	adds.w	r3, ip, r3
 80009fe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a02:	f080 80fc 	bcs.w	8000bfe <__udivmoddi4+0x282>
 8000a06:	429e      	cmp	r6, r3
 8000a08:	f240 80f9 	bls.w	8000bfe <__udivmoddi4+0x282>
 8000a0c:	4463      	add	r3, ip
 8000a0e:	3802      	subs	r0, #2
 8000a10:	1b9b      	subs	r3, r3, r6
 8000a12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a16:	2100      	movs	r1, #0
 8000a18:	b11d      	cbz	r5, 8000a22 <__udivmoddi4+0xa6>
 8000a1a:	40d3      	lsrs	r3, r2
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a26:	428b      	cmp	r3, r1
 8000a28:	d905      	bls.n	8000a36 <__udivmoddi4+0xba>
 8000a2a:	b10d      	cbz	r5, 8000a30 <__udivmoddi4+0xb4>
 8000a2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a30:	2100      	movs	r1, #0
 8000a32:	4608      	mov	r0, r1
 8000a34:	e7f5      	b.n	8000a22 <__udivmoddi4+0xa6>
 8000a36:	fab3 f183 	clz	r1, r3
 8000a3a:	2900      	cmp	r1, #0
 8000a3c:	d146      	bne.n	8000acc <__udivmoddi4+0x150>
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	d302      	bcc.n	8000a48 <__udivmoddi4+0xcc>
 8000a42:	4290      	cmp	r0, r2
 8000a44:	f0c0 80f0 	bcc.w	8000c28 <__udivmoddi4+0x2ac>
 8000a48:	1a86      	subs	r6, r0, r2
 8000a4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a4e:	2001      	movs	r0, #1
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d0e6      	beq.n	8000a22 <__udivmoddi4+0xa6>
 8000a54:	e9c5 6300 	strd	r6, r3, [r5]
 8000a58:	e7e3      	b.n	8000a22 <__udivmoddi4+0xa6>
 8000a5a:	2a00      	cmp	r2, #0
 8000a5c:	f040 8090 	bne.w	8000b80 <__udivmoddi4+0x204>
 8000a60:	eba1 040c 	sub.w	r4, r1, ip
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	fa1f f78c 	uxth.w	r7, ip
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a76:	fb08 4416 	mls	r4, r8, r6, r4
 8000a7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a7e:	fb07 f006 	mul.w	r0, r7, r6
 8000a82:	4298      	cmp	r0, r3
 8000a84:	d908      	bls.n	8000a98 <__udivmoddi4+0x11c>
 8000a86:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a8e:	d202      	bcs.n	8000a96 <__udivmoddi4+0x11a>
 8000a90:	4298      	cmp	r0, r3
 8000a92:	f200 80cd 	bhi.w	8000c30 <__udivmoddi4+0x2b4>
 8000a96:	4626      	mov	r6, r4
 8000a98:	1a1c      	subs	r4, r3, r0
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aa2:	fb08 4410 	mls	r4, r8, r0, r4
 8000aa6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aaa:	fb00 f707 	mul.w	r7, r0, r7
 8000aae:	429f      	cmp	r7, r3
 8000ab0:	d908      	bls.n	8000ac4 <__udivmoddi4+0x148>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aba:	d202      	bcs.n	8000ac2 <__udivmoddi4+0x146>
 8000abc:	429f      	cmp	r7, r3
 8000abe:	f200 80b0 	bhi.w	8000c22 <__udivmoddi4+0x2a6>
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	1bdb      	subs	r3, r3, r7
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	e7a5      	b.n	8000a18 <__udivmoddi4+0x9c>
 8000acc:	f1c1 0620 	rsb	r6, r1, #32
 8000ad0:	408b      	lsls	r3, r1
 8000ad2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ad6:	431f      	orrs	r7, r3
 8000ad8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000adc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ae0:	ea43 030c 	orr.w	r3, r3, ip
 8000ae4:	40f4      	lsrs	r4, r6
 8000ae6:	fa00 f801 	lsl.w	r8, r0, r1
 8000aea:	0c38      	lsrs	r0, r7, #16
 8000aec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000af0:	fbb4 fef0 	udiv	lr, r4, r0
 8000af4:	fa1f fc87 	uxth.w	ip, r7
 8000af8:	fb00 441e 	mls	r4, r0, lr, r4
 8000afc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b00:	fb0e f90c 	mul.w	r9, lr, ip
 8000b04:	45a1      	cmp	r9, r4
 8000b06:	fa02 f201 	lsl.w	r2, r2, r1
 8000b0a:	d90a      	bls.n	8000b22 <__udivmoddi4+0x1a6>
 8000b0c:	193c      	adds	r4, r7, r4
 8000b0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b12:	f080 8084 	bcs.w	8000c1e <__udivmoddi4+0x2a2>
 8000b16:	45a1      	cmp	r9, r4
 8000b18:	f240 8081 	bls.w	8000c1e <__udivmoddi4+0x2a2>
 8000b1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b20:	443c      	add	r4, r7
 8000b22:	eba4 0409 	sub.w	r4, r4, r9
 8000b26:	fa1f f983 	uxth.w	r9, r3
 8000b2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b3a:	45a4      	cmp	ip, r4
 8000b3c:	d907      	bls.n	8000b4e <__udivmoddi4+0x1d2>
 8000b3e:	193c      	adds	r4, r7, r4
 8000b40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b44:	d267      	bcs.n	8000c16 <__udivmoddi4+0x29a>
 8000b46:	45a4      	cmp	ip, r4
 8000b48:	d965      	bls.n	8000c16 <__udivmoddi4+0x29a>
 8000b4a:	3b02      	subs	r3, #2
 8000b4c:	443c      	add	r4, r7
 8000b4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b52:	fba0 9302 	umull	r9, r3, r0, r2
 8000b56:	eba4 040c 	sub.w	r4, r4, ip
 8000b5a:	429c      	cmp	r4, r3
 8000b5c:	46ce      	mov	lr, r9
 8000b5e:	469c      	mov	ip, r3
 8000b60:	d351      	bcc.n	8000c06 <__udivmoddi4+0x28a>
 8000b62:	d04e      	beq.n	8000c02 <__udivmoddi4+0x286>
 8000b64:	b155      	cbz	r5, 8000b7c <__udivmoddi4+0x200>
 8000b66:	ebb8 030e 	subs.w	r3, r8, lr
 8000b6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b72:	40cb      	lsrs	r3, r1
 8000b74:	431e      	orrs	r6, r3
 8000b76:	40cc      	lsrs	r4, r1
 8000b78:	e9c5 6400 	strd	r6, r4, [r5]
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	e750      	b.n	8000a22 <__udivmoddi4+0xa6>
 8000b80:	f1c2 0320 	rsb	r3, r2, #32
 8000b84:	fa20 f103 	lsr.w	r1, r0, r3
 8000b88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b90:	4094      	lsls	r4, r2
 8000b92:	430c      	orrs	r4, r1
 8000b94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9c:	fa1f f78c 	uxth.w	r7, ip
 8000ba0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ba8:	0c23      	lsrs	r3, r4, #16
 8000baa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bae:	fb00 f107 	mul.w	r1, r0, r7
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x24c>
 8000bb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bbe:	d22c      	bcs.n	8000c1a <__udivmoddi4+0x29e>
 8000bc0:	4299      	cmp	r1, r3
 8000bc2:	d92a      	bls.n	8000c1a <__udivmoddi4+0x29e>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	4463      	add	r3, ip
 8000bc8:	1a5b      	subs	r3, r3, r1
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000bd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000bd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd8:	fb01 f307 	mul.w	r3, r1, r7
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x276>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000be8:	d213      	bcs.n	8000c12 <__udivmoddi4+0x296>
 8000bea:	42a3      	cmp	r3, r4
 8000bec:	d911      	bls.n	8000c12 <__udivmoddi4+0x296>
 8000bee:	3902      	subs	r1, #2
 8000bf0:	4464      	add	r4, ip
 8000bf2:	1ae4      	subs	r4, r4, r3
 8000bf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000bf8:	e739      	b.n	8000a6e <__udivmoddi4+0xf2>
 8000bfa:	4604      	mov	r4, r0
 8000bfc:	e6f0      	b.n	80009e0 <__udivmoddi4+0x64>
 8000bfe:	4608      	mov	r0, r1
 8000c00:	e706      	b.n	8000a10 <__udivmoddi4+0x94>
 8000c02:	45c8      	cmp	r8, r9
 8000c04:	d2ae      	bcs.n	8000b64 <__udivmoddi4+0x1e8>
 8000c06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c0e:	3801      	subs	r0, #1
 8000c10:	e7a8      	b.n	8000b64 <__udivmoddi4+0x1e8>
 8000c12:	4631      	mov	r1, r6
 8000c14:	e7ed      	b.n	8000bf2 <__udivmoddi4+0x276>
 8000c16:	4603      	mov	r3, r0
 8000c18:	e799      	b.n	8000b4e <__udivmoddi4+0x1d2>
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	e7d4      	b.n	8000bc8 <__udivmoddi4+0x24c>
 8000c1e:	46d6      	mov	lr, sl
 8000c20:	e77f      	b.n	8000b22 <__udivmoddi4+0x1a6>
 8000c22:	4463      	add	r3, ip
 8000c24:	3802      	subs	r0, #2
 8000c26:	e74d      	b.n	8000ac4 <__udivmoddi4+0x148>
 8000c28:	4606      	mov	r6, r0
 8000c2a:	4623      	mov	r3, r4
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	e70f      	b.n	8000a50 <__udivmoddi4+0xd4>
 8000c30:	3e02      	subs	r6, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	e730      	b.n	8000a98 <__udivmoddi4+0x11c>
 8000c36:	bf00      	nop

08000c38 <__aeabi_idiv0>:
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart1, RxData, 6);
 8000c44:	2206      	movs	r2, #6
 8000c46:	492c      	ldr	r1, [pc, #176]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c48:	482c      	ldr	r0, [pc, #176]	@ (8000cfc <HAL_UART_RxCpltCallback+0xc0>)
 8000c4a:	f003 fe65 	bl	8004918 <HAL_UART_Receive_DMA>

	DirB = (RxData[0] - 48);
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	3b30      	subs	r3, #48	@ 0x30
 8000c54:	4a2a      	ldr	r2, [pc, #168]	@ (8000d00 <HAL_UART_RxCpltCallback+0xc4>)
 8000c56:	6013      	str	r3, [r2, #0]
	SetRPM_B = (((RxData[2] - 48) + ((RxData[1] - 48) * 10))) * 2;
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c5a:	789b      	ldrb	r3, [r3, #2]
 8000c5c:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000c60:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c62:	785b      	ldrb	r3, [r3, #1]
 8000c64:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000c68:	4613      	mov	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	4413      	add	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	440b      	add	r3, r1
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	4a23      	ldr	r2, [pc, #140]	@ (8000d04 <HAL_UART_RxCpltCallback+0xc8>)
 8000c76:	6013      	str	r3, [r2, #0]

	DirA = (RxData[3] - 48);
 8000c78:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	3b30      	subs	r3, #48	@ 0x30
 8000c7e:	4a22      	ldr	r2, [pc, #136]	@ (8000d08 <HAL_UART_RxCpltCallback+0xcc>)
 8000c80:	6013      	str	r3, [r2, #0]
	SetRPM_A = (((RxData[5] - 48) + ((RxData[4] - 48) * 10))) * 2;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c84:	795b      	ldrb	r3, [r3, #5]
 8000c86:	f1a3 0130 	sub.w	r1, r3, #48	@ 0x30
 8000c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000c8c:	791b      	ldrb	r3, [r3, #4]
 8000c8e:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8000c92:	4613      	mov	r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	4413      	add	r3, r2
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	440b      	add	r3, r1
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	4a1b      	ldr	r2, [pc, #108]	@ (8000d0c <HAL_UART_RxCpltCallback+0xd0>)
 8000ca0:	6013      	str	r3, [r2, #0]

	TIM4->CNT = 20000;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <HAL_UART_RxCpltCallback+0xd4>)
 8000ca4:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000ca8:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CNT = 20000;
 8000caa:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000cae:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8000cb2:	625a      	str	r2, [r3, #36]	@ 0x24

	NR = 0;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <HAL_UART_RxCpltCallback+0xd8>)
 8000cb6:	f04f 0200 	mov.w	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
	NL = 0;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_UART_RxCpltCallback+0xdc>)
 8000cbe:	f04f 0200 	mov.w	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

	NewCmd = 1;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <HAL_UART_RxCpltCallback+0xe0>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
	change = 1;
 8000cca:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_RxCpltCallback+0xe4>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < RxBufferSize; i++) {
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e007      	b.n	8000ce6 <HAL_UART_RxCpltCallback+0xaa>
		RxData[i] = 0;
 8000cd6:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <HAL_UART_RxCpltCallback+0xbc>)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4413      	add	r3, r2
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RxBufferSize; i++) {
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b27      	cmp	r3, #39	@ 0x27
 8000cea:	ddf4      	ble.n	8000cd6 <HAL_UART_RxCpltCallback+0x9a>
	}

}
 8000cec:	bf00      	nop
 8000cee:	bf00      	nop
 8000cf0:	3710      	adds	r7, #16
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	200002b8 	.word	0x200002b8
 8000cfc:	200001c4 	.word	0x200001c4
 8000d00:	2000001c 	.word	0x2000001c
 8000d04:	20000344 	.word	0x20000344
 8000d08:	2000000c 	.word	0x2000000c
 8000d0c:	20000300 	.word	0x20000300
 8000d10:	40000800 	.word	0x40000800
 8000d14:	200002fc 	.word	0x200002fc
 8000d18:	200002f8 	.word	0x200002f8
 8000d1c:	200002b4 	.word	0x200002b4
 8000d20:	2000026c 	.word	0x2000026c

08000d24 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	ReadyToSend = 1;
 8000d2c:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <HAL_UART_TxCpltCallback+0x1c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	601a      	str	r2, [r3, #0]

}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	20000000 	.word	0x20000000

08000d44 <motorA_RUN>:

void motorA_RUN(int pwm) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

	if (pwm < 0) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	da01      	bge.n	8000d56 <motorA_RUN+0x12>
		pwm = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
	}
	if (pwm >= 255) {
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d5a:	dd01      	ble.n	8000d60 <motorA_RUN+0x1c>
		pwm = 255;
 8000d5c:	23ff      	movs	r3, #255	@ 0xff
 8000d5e:	607b      	str	r3, [r7, #4]
	}

	if (DirA == 1) {
 8000d60:	4b1b      	ldr	r3, [pc, #108]	@ (8000dd0 <motorA_RUN+0x8c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d10e      	bne.n	8000d86 <motorA_RUN+0x42>
		HAL_GPIO_WritePin(IN1_GPIO, IN1_PIN, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2180      	movs	r1, #128	@ 0x80
 8000d6c:	4819      	ldr	r0, [pc, #100]	@ (8000dd4 <motorA_RUN+0x90>)
 8000d6e:	f002 f97f 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO, IN2_PIN, 1);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2140      	movs	r1, #64	@ 0x40
 8000d76:	4817      	ldr	r0, [pc, #92]	@ (8000dd4 <motorA_RUN+0x90>)
 8000d78:	f002 f97a 	bl	8003070 <HAL_GPIO_WritePin>

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm);
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <motorA_RUN+0x94>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_GPIO_WritePin(IN1_GPIO, IN1_PIN, 1);
		HAL_GPIO_WritePin(IN2_GPIO, IN2_PIN, 1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
	}

}
 8000d84:	e020      	b.n	8000dc8 <motorA_RUN+0x84>
	} else if (DirA == 2) {
 8000d86:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <motorA_RUN+0x8c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d10e      	bne.n	8000dac <motorA_RUN+0x68>
		HAL_GPIO_WritePin(IN1_GPIO, IN1_PIN, 1);
 8000d8e:	2201      	movs	r2, #1
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <motorA_RUN+0x90>)
 8000d94:	f002 f96c 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO, IN2_PIN, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2140      	movs	r1, #64	@ 0x40
 8000d9c:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <motorA_RUN+0x90>)
 8000d9e:	f002 f967 	bl	8003070 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, pwm);
 8000da2:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd8 <motorA_RUN+0x94>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000daa:	e00d      	b.n	8000dc8 <motorA_RUN+0x84>
		HAL_GPIO_WritePin(IN1_GPIO, IN1_PIN, 1);
 8000dac:	2201      	movs	r2, #1
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <motorA_RUN+0x90>)
 8000db2:	f002 f95d 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2_GPIO, IN2_PIN, 1);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2140      	movs	r1, #64	@ 0x40
 8000dba:	4806      	ldr	r0, [pc, #24]	@ (8000dd4 <motorA_RUN+0x90>)
 8000dbc:	f002 f958 	bl	8003070 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <motorA_RUN+0x94>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	40020000 	.word	0x40020000
 8000dd8:	20000134 	.word	0x20000134

08000ddc <motorB_RUN>:

void motorB_RUN(int pwm) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]

	if (pwm < 0) {
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	da01      	bge.n	8000dee <motorB_RUN+0x12>
		pwm = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	607b      	str	r3, [r7, #4]
	}
	if (pwm >= 255) {
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000df2:	dd01      	ble.n	8000df8 <motorB_RUN+0x1c>
		pwm = 255;
 8000df4:	23ff      	movs	r3, #255	@ 0xff
 8000df6:	607b      	str	r3, [r7, #4]
	}

	if (DirB == 1) {
 8000df8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e70 <motorB_RUN+0x94>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d10f      	bne.n	8000e20 <motorB_RUN+0x44>
		HAL_GPIO_WritePin(IN3_GPIO, IN3_PIN, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	481b      	ldr	r0, [pc, #108]	@ (8000e74 <motorB_RUN+0x98>)
 8000e06:	f002 f933 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO, IN4_PIN, 1);
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e10:	4818      	ldr	r0, [pc, #96]	@ (8000e74 <motorB_RUN+0x98>)
 8000e12:	f002 f92d 	bl	8003070 <HAL_GPIO_WritePin>

		__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm);
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <motorB_RUN+0x9c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	641a      	str	r2, [r3, #64]	@ 0x40
		HAL_GPIO_WritePin(IN3_GPIO, IN3_PIN, 1);
		HAL_GPIO_WritePin(IN4_GPIO, IN4_PIN, 1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
	}

}
 8000e1e:	e022      	b.n	8000e66 <motorB_RUN+0x8a>
	} else if (DirB == 2) {
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <motorB_RUN+0x94>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d10f      	bne.n	8000e48 <motorB_RUN+0x6c>
		HAL_GPIO_WritePin(IN3_GPIO, IN3_PIN, 1);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2104      	movs	r1, #4
 8000e2c:	4811      	ldr	r0, [pc, #68]	@ (8000e74 <motorB_RUN+0x98>)
 8000e2e:	f002 f91f 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO, IN4_PIN, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e38:	480e      	ldr	r0, [pc, #56]	@ (8000e74 <motorB_RUN+0x98>)
 8000e3a:	f002 f919 	bl	8003070 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, pwm);
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <motorB_RUN+0x9c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e46:	e00e      	b.n	8000e66 <motorB_RUN+0x8a>
		HAL_GPIO_WritePin(IN3_GPIO, IN3_PIN, 1);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	4809      	ldr	r0, [pc, #36]	@ (8000e74 <motorB_RUN+0x98>)
 8000e4e:	f002 f90f 	bl	8003070 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN4_GPIO, IN4_PIN, 1);
 8000e52:	2201      	movs	r2, #1
 8000e54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <motorB_RUN+0x98>)
 8000e5a:	f002 f909 	bl	8003070 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 0);
 8000e5e:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <motorB_RUN+0x9c>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000001c 	.word	0x2000001c
 8000e74:	40020400 	.word	0x40020400
 8000e78:	20000134 	.word	0x20000134

08000e7c <MovingAvarageFilter_A>:
int MovingAvarageFilter_A(int NewError) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	// Shift all elements to the right
	for (int i = (BUFFER_SIZE - 1); i > 0; i--) {
 8000e84:	2309      	movs	r3, #9
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00b      	b.n	8000ea2 <MovingAvarageFilter_A+0x26>
		MotorA_Error[i] = MotorA_Error[i - 1];
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <MovingAvarageFilter_A+0x64>)
 8000e90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e94:	4912      	ldr	r1, [pc, #72]	@ (8000ee0 <MovingAvarageFilter_A+0x64>)
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = (BUFFER_SIZE - 1); i > 0; i--) {
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	dcf0      	bgt.n	8000e8a <MovingAvarageFilter_A+0xe>
	}
	// Insert new error at the beginning
	MotorA_Error[0] = NewError;
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <MovingAvarageFilter_A+0x64>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]

	// Calculate the sum of the buffer
	int sum = 0;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
 8000eb6:	e009      	b.n	8000ecc <MovingAvarageFilter_A+0x50>
		sum += MotorA_Error[i];
 8000eb8:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <MovingAvarageFilter_A+0x64>)
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2b09      	cmp	r3, #9
 8000ed0:	ddf2      	ble.n	8000eb8 <MovingAvarageFilter_A+0x3c>
	}
	return sum;
 8000ed2:	693b      	ldr	r3, [r7, #16]

}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	371c      	adds	r7, #28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	2000031c 	.word	0x2000031c

08000ee4 <MovingAvarageFilter_B>:

int MovingAvarageFilter_B(int NewError) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	// Shift all elements to the right
	for (int i = (BUFFER_SIZE - 1); i > 0; i--) {
 8000eec:	2309      	movs	r3, #9
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e00b      	b.n	8000f0a <MovingAvarageFilter_B+0x26>
		MotorB_Error[i] = MotorB_Error[i - 1];
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	4a14      	ldr	r2, [pc, #80]	@ (8000f48 <MovingAvarageFilter_B+0x64>)
 8000ef8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000efc:	4912      	ldr	r1, [pc, #72]	@ (8000f48 <MovingAvarageFilter_B+0x64>)
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = (BUFFER_SIZE - 1); i > 0; i--) {
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dcf0      	bgt.n	8000ef2 <MovingAvarageFilter_B+0xe>
	}
	// Insert new error at the beginning
	MotorB_Error[0] = NewError;
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <MovingAvarageFilter_B+0x64>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6013      	str	r3, [r2, #0]

	// Calculate the sum of the buffer
	int sum = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	e009      	b.n	8000f34 <MovingAvarageFilter_B+0x50>
		sum += MotorB_Error[i];
 8000f20:	4a09      	ldr	r2, [pc, #36]	@ (8000f48 <MovingAvarageFilter_B+0x64>)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < BUFFER_SIZE; i++) {
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	2b09      	cmp	r3, #9
 8000f38:	ddf2      	ble.n	8000f20 <MovingAvarageFilter_B+0x3c>
	}
	return sum;
 8000f3a:	693b      	ldr	r3, [r7, #16]

}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	371c      	adds	r7, #28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	2000035c 	.word	0x2000035c

08000f4c <PID_A>:

float PID_A(int rpma) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	int Error = SetRPM_A - rpma;
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <PID_A+0x94>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	61fb      	str	r3, [r7, #28]
	float P = ((float) Error) * P_GainA;
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f68:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <PID_A+0x98>)
 8000f6a:	edd3 7a00 	vldr	s15, [r3]
 8000f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f72:	edc7 7a06 	vstr	s15, [r7, #24]
	float I = ((float) (MovingAvarageFilter_A(Error))) * I_GainA;
 8000f76:	69f8      	ldr	r0, [r7, #28]
 8000f78:	f7ff ff80 	bl	8000e7c <MovingAvarageFilter_A>
 8000f7c:	ee07 0a90 	vmov	s15, r0
 8000f80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f84:	4b18      	ldr	r3, [pc, #96]	@ (8000fe8 <PID_A+0x9c>)
 8000f86:	edd3 7a00 	vldr	s15, [r3]
 8000f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f8e:	edc7 7a05 	vstr	s15, [r7, #20]
	float D = ((float) (Error - Prev_ErrorA)) * D_GainA;
 8000f92:	4b16      	ldr	r3, [pc, #88]	@ (8000fec <PID_A+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	69fa      	ldr	r2, [r7, #28]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	ee07 3a90 	vmov	s15, r3
 8000f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fa2:	4b13      	ldr	r3, [pc, #76]	@ (8000ff0 <PID_A+0xa4>)
 8000fa4:	edd3 7a00 	vldr	s15, [r3]
 8000fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fac:	edc7 7a04 	vstr	s15, [r7, #16]
	float PID =  P + I + D;
 8000fb0:	ed97 7a06 	vldr	s14, [r7, #24]
 8000fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fbc:	ed97 7a04 	vldr	s14, [r7, #16]
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	edc7 7a03 	vstr	s15, [r7, #12]
	Prev_ErrorA = Error;
 8000fc8:	4a08      	ldr	r2, [pc, #32]	@ (8000fec <PID_A+0xa0>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	6013      	str	r3, [r2, #0]
	return PID;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	ee07 3a90 	vmov	s15, r3

}
 8000fd4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000300 	.word	0x20000300
 8000fe4:	20000010 	.word	0x20000010
 8000fe8:	20000014 	.word	0x20000014
 8000fec:	20000318 	.word	0x20000318
 8000ff0:	20000018 	.word	0x20000018

08000ff4 <PID_B>:

float PID_B(int rpma) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	int Error = SetRPM_B - rpma;
 8000ffc:	4b22      	ldr	r3, [pc, #136]	@ (8001088 <PID_B+0x94>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	61fb      	str	r3, [r7, #28]
	float P = ((float) Error) * P_GainB;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001010:	4b1e      	ldr	r3, [pc, #120]	@ (800108c <PID_B+0x98>)
 8001012:	edd3 7a00 	vldr	s15, [r3]
 8001016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101a:	edc7 7a06 	vstr	s15, [r7, #24]
	float I = ((float) (MovingAvarageFilter_B(Error))) * I_GainB;
 800101e:	69f8      	ldr	r0, [r7, #28]
 8001020:	f7ff ff60 	bl	8000ee4 <MovingAvarageFilter_B>
 8001024:	ee07 0a90 	vmov	s15, r0
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	4b18      	ldr	r3, [pc, #96]	@ (8001090 <PID_B+0x9c>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001036:	edc7 7a05 	vstr	s15, [r7, #20]
	float D = ((float) (Error - Prev_ErrorB)) * D_GainB;
 800103a:	4b16      	ldr	r3, [pc, #88]	@ (8001094 <PID_B+0xa0>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	69fa      	ldr	r2, [r7, #28]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	ee07 3a90 	vmov	s15, r3
 8001046:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <PID_B+0xa4>)
 800104c:	edd3 7a00 	vldr	s15, [r3]
 8001050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001054:	edc7 7a04 	vstr	s15, [r7, #16]
	float PID = (P + I + D);
 8001058:	ed97 7a06 	vldr	s14, [r7, #24]
 800105c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001064:	ed97 7a04 	vldr	s14, [r7, #16]
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	edc7 7a03 	vstr	s15, [r7, #12]
	Prev_ErrorB = Error;
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <PID_B+0xa0>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	6013      	str	r3, [r2, #0]
	return PID;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	ee07 3a90 	vmov	s15, r3

}
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	3720      	adds	r7, #32
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000344 	.word	0x20000344
 800108c:	20000020 	.word	0x20000020
 8001090:	20000024 	.word	0x20000024
 8001094:	20000358 	.word	0x20000358
 8001098:	20000028 	.word	0x20000028
 800109c:	00000000 	.word	0x00000000

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b5b0      	push	{r4, r5, r7, lr}
 80010a2:	b094      	sub	sp, #80	@ 0x50
 80010a4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a6:	f001 f8d9 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010aa:	f000 fbcf 	bl	800184c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ae:	f000 fdf9 	bl	8001ca4 <MX_GPIO_Init>
  MX_DMA_Init();
 80010b2:	f000 fdd7 	bl	8001c64 <MX_DMA_Init>
  MX_TIM1_Init();
 80010b6:	f000 fc33 	bl	8001920 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010ba:	f000 fda9 	bl	8001c10 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80010be:	f000 fcd3 	bl	8001a68 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010c2:	f000 fd51 	bl	8001b68 <MX_TIM4_Init>
  MX_TIM2_Init();
 80010c6:	f000 fc7b 	bl	80019c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //UART RECEIVE DMA
  	HAL_UART_Receive_DMA(&huart1, RxData, 6);
 80010ca:	2206      	movs	r2, #6
 80010cc:	49b2      	ldr	r1, [pc, #712]	@ (8001398 <main+0x2f8>)
 80010ce:	48b3      	ldr	r0, [pc, #716]	@ (800139c <main+0x2fc>)
 80010d0:	f003 fc22 	bl	8004918 <HAL_UART_Receive_DMA>

  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); //PB1
 80010d4:	2108      	movs	r1, #8
 80010d6:	48b2      	ldr	r0, [pc, #712]	@ (80013a0 <main+0x300>)
 80010d8:	f002 fce4 	bl	8003aa4 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4); //PB0
 80010dc:	210c      	movs	r1, #12
 80010de:	48b0      	ldr	r0, [pc, #704]	@ (80013a0 <main+0x300>)
 80010e0:	f002 fce0 	bl	8003aa4 <HAL_TIM_PWM_Start>

  	//START ENCODER MODES
  	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80010e4:	213c      	movs	r1, #60	@ 0x3c
 80010e6:	48af      	ldr	r0, [pc, #700]	@ (80013a4 <main+0x304>)
 80010e8:	f002 fe32 	bl	8003d50 <HAL_TIM_Encoder_Start>
  	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010ec:	213c      	movs	r1, #60	@ 0x3c
 80010ee:	48ae      	ldr	r0, [pc, #696]	@ (80013a8 <main+0x308>)
 80010f0:	f002 fe2e 	bl	8003d50 <HAL_TIM_Encoder_Start>

  	//CHECK STOPS
  	float PrevNR = 0;
 80010f4:	f04f 0300 	mov.w	r3, #0
 80010f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  	float PrevNL = 0;
 80010fa:	f04f 0300 	mov.w	r3, #0
 80010fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  	//START TIMING THE MOTORS

  	TIM4->CNT = 20000;
 8001100:	4baa      	ldr	r3, [pc, #680]	@ (80013ac <main+0x30c>)
 8001102:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001106:	625a      	str	r2, [r3, #36]	@ 0x24
  	TIM2->CNT = 20000;
 8001108:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800110c:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24
  	preViousMillis_A = HAL_GetTick();
 8001112:	f001 f909 	bl	8002328 <HAL_GetTick>
 8001116:	4603      	mov	r3, r0
 8001118:	4aa5      	ldr	r2, [pc, #660]	@ (80013b0 <main+0x310>)
 800111a:	6013      	str	r3, [r2, #0]
  	preViousMillis_B = HAL_GetTick();
 800111c:	f001 f904 	bl	8002328 <HAL_GetTick>
 8001120:	4603      	mov	r3, r0
 8001122:	4aa4      	ldr	r2, [pc, #656]	@ (80013b4 <main+0x314>)
 8001124:	6013      	str	r3, [r2, #0]

  	//TIME PID CALCULATE INTERVALS
  	PrevSend = HAL_GetTick();
 8001126:	f001 f8ff 	bl	8002328 <HAL_GetTick>
 800112a:	4603      	mov	r3, r0
 800112c:	4aa2      	ldr	r2, [pc, #648]	@ (80013b8 <main+0x318>)
 800112e:	6013      	str	r3, [r2, #0]
  	PrevPID = HAL_GetTick();
 8001130:	f001 f8fa 	bl	8002328 <HAL_GetTick>
 8001134:	4603      	mov	r3, r0
 8001136:	4aa1      	ldr	r2, [pc, #644]	@ (80013bc <main+0x31c>)
 8001138:	6013      	str	r3, [r2, #0]
  	PrevChckStop = HAL_GetTick();
 800113a:	f001 f8f5 	bl	8002328 <HAL_GetTick>
 800113e:	4603      	mov	r3, r0
 8001140:	4a9f      	ldr	r2, [pc, #636]	@ (80013c0 <main+0x320>)
 8001142:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  currentMillis = HAL_GetTick();
 8001144:	f001 f8f0 	bl	8002328 <HAL_GetTick>
 8001148:	4603      	mov	r3, r0
 800114a:	4a9e      	ldr	r2, [pc, #632]	@ (80013c4 <main+0x324>)
 800114c:	6013      	str	r3, [r2, #0]
	  		counterValue_A = TIM4->CNT;
 800114e:	4b97      	ldr	r3, [pc, #604]	@ (80013ac <main+0x30c>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	461a      	mov	r2, r3
 8001154:	4b9c      	ldr	r3, [pc, #624]	@ (80013c8 <main+0x328>)
 8001156:	601a      	str	r2, [r3, #0]
	  		counterValue_B = TIM2->CNT;
 8001158:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800115c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800115e:	461a      	mov	r2, r3
 8001160:	4b9a      	ldr	r3, [pc, #616]	@ (80013cc <main+0x32c>)
 8001162:	601a      	str	r2, [r3, #0]

	  		if (counterValue_A >= 20200 && DirA == 1) {
 8001164:	4b98      	ldr	r3, [pc, #608]	@ (80013c8 <main+0x328>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f644 62e7 	movw	r2, #20199	@ 0x4ee7
 800116c:	4293      	cmp	r3, r2
 800116e:	dd3a      	ble.n	80011e6 <main+0x146>
 8001170:	4b97      	ldr	r3, [pc, #604]	@ (80013d0 <main+0x330>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d136      	bne.n	80011e6 <main+0x146>
	  			int time = currentMillis - preViousMillis_A;
 8001178:	4b92      	ldr	r3, [pc, #584]	@ (80013c4 <main+0x324>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b8c      	ldr	r3, [pc, #560]	@ (80013b0 <main+0x310>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	637b      	str	r3, [r7, #52]	@ 0x34
	  			float speedy = ((float) 60000 / (float) time)
 8001184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118e:	eddf 6a91 	vldr	s13, [pc, #580]	@ 80013d4 <main+0x334>
 8001192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	  					* ((float) ((TIM4->CNT) - 20000) / (float) 2000);
 8001196:	4b85      	ldr	r3, [pc, #532]	@ (80013ac <main+0x30c>)
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 800119e:	3b20      	subs	r3, #32
 80011a0:	ee07 3a90 	vmov	s15, r3
 80011a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011a8:	ed9f 6a8b 	vldr	s12, [pc, #556]	@ 80013d8 <main+0x338>
 80011ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
	  			float speedy = ((float) 60000 / (float) time)
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	  			RPMA = (int) speedy;
 80011b8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80011bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c0:	ee17 2a90 	vmov	r2, s15
 80011c4:	4b85      	ldr	r3, [pc, #532]	@ (80013dc <main+0x33c>)
 80011c6:	601a      	str	r2, [r3, #0]
	  			PrecCounterValue_A = 20000;
 80011c8:	4b85      	ldr	r3, [pc, #532]	@ (80013e0 <main+0x340>)
 80011ca:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80011ce:	601a      	str	r2, [r3, #0]
	  			preViousMillis_A = currentMillis;
 80011d0:	4b7c      	ldr	r3, [pc, #496]	@ (80013c4 <main+0x324>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a76      	ldr	r2, [pc, #472]	@ (80013b0 <main+0x310>)
 80011d6:	6013      	str	r3, [r2, #0]
	  			TIM4->CNT = 20000;
 80011d8:	4b74      	ldr	r3, [pc, #464]	@ (80013ac <main+0x30c>)
 80011da:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80011de:	625a      	str	r2, [r3, #36]	@ 0x24
	  			change = 1;
 80011e0:	4b80      	ldr	r3, [pc, #512]	@ (80013e4 <main+0x344>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
	  		}

	  		if (counterValue_B >= 20200 && DirB == 1) {
 80011e6:	4b79      	ldr	r3, [pc, #484]	@ (80013cc <main+0x32c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f644 62e7 	movw	r2, #20199	@ 0x4ee7
 80011ee:	4293      	cmp	r3, r2
 80011f0:	dd3c      	ble.n	800126c <main+0x1cc>
 80011f2:	4b7d      	ldr	r3, [pc, #500]	@ (80013e8 <main+0x348>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d138      	bne.n	800126c <main+0x1cc>
	  			int time = currentMillis - preViousMillis_B;
 80011fa:	4b72      	ldr	r3, [pc, #456]	@ (80013c4 <main+0x324>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b6d      	ldr	r3, [pc, #436]	@ (80013b4 <main+0x314>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  			float speedy = ((float) 60000 / (float) time)
 8001206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001210:	eddf 6a70 	vldr	s13, [pc, #448]	@ 80013d4 <main+0x334>
 8001214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	  					* ((float) ((TIM2->CNT) - 20000) / (float) 2000);
 8001218:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800121c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121e:	f5a3 439c 	sub.w	r3, r3, #19968	@ 0x4e00
 8001222:	3b20      	subs	r3, #32
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800122c:	ed9f 6a6a 	vldr	s12, [pc, #424]	@ 80013d8 <main+0x338>
 8001230:	eec6 7a86 	vdiv.f32	s15, s13, s12
	  			float speedy = ((float) 60000 / (float) time)
 8001234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001238:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	  			RPMB = (int) speedy;
 800123c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001244:	ee17 2a90 	vmov	r2, s15
 8001248:	4b68      	ldr	r3, [pc, #416]	@ (80013ec <main+0x34c>)
 800124a:	601a      	str	r2, [r3, #0]

	  			preViousMillis_B = currentMillis;
 800124c:	4b5d      	ldr	r3, [pc, #372]	@ (80013c4 <main+0x324>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a58      	ldr	r2, [pc, #352]	@ (80013b4 <main+0x314>)
 8001252:	6013      	str	r3, [r2, #0]
	  			PrecCounterValue_B = 20000;
 8001254:	4b66      	ldr	r3, [pc, #408]	@ (80013f0 <main+0x350>)
 8001256:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800125a:	601a      	str	r2, [r3, #0]
	  			TIM2->CNT = 20000;
 800125c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001260:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001264:	625a      	str	r2, [r3, #36]	@ 0x24
	  			change = 1;
 8001266:	4b5f      	ldr	r3, [pc, #380]	@ (80013e4 <main+0x344>)
 8001268:	2201      	movs	r2, #1
 800126a:	601a      	str	r2, [r3, #0]
	  		}

	  		if (counterValue_A <= 19800 && DirA == 2) {
 800126c:	4b56      	ldr	r3, [pc, #344]	@ (80013c8 <main+0x328>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f644 5258 	movw	r2, #19800	@ 0x4d58
 8001274:	4293      	cmp	r3, r2
 8001276:	dc3a      	bgt.n	80012ee <main+0x24e>
 8001278:	4b55      	ldr	r3, [pc, #340]	@ (80013d0 <main+0x330>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d136      	bne.n	80012ee <main+0x24e>
	  			int time = currentMillis - preViousMillis_A;
 8001280:	4b50      	ldr	r3, [pc, #320]	@ (80013c4 <main+0x324>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	4b4a      	ldr	r3, [pc, #296]	@ (80013b0 <main+0x310>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
	  			float speedy = ((float) 60000 / (float) time)
 800128c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80013d4 <main+0x334>
 800129a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	  					* ((float) (20000 - (TIM4->CNT)) / (float) 2000);
 800129e:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <main+0x30c>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a2:	f5c3 439c 	rsb	r3, r3, #19968	@ 0x4e00
 80012a6:	3320      	adds	r3, #32
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80012b0:	ed9f 6a49 	vldr	s12, [pc, #292]	@ 80013d8 <main+0x338>
 80012b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
	  			float speedy = ((float) 60000 / (float) time)
 80012b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012bc:	edc7 7a08 	vstr	s15, [r7, #32]
	  			RPMA = (int) speedy;
 80012c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80012c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012c8:	ee17 2a90 	vmov	r2, s15
 80012cc:	4b43      	ldr	r3, [pc, #268]	@ (80013dc <main+0x33c>)
 80012ce:	601a      	str	r2, [r3, #0]

	  			preViousMillis_A = currentMillis;
 80012d0:	4b3c      	ldr	r3, [pc, #240]	@ (80013c4 <main+0x324>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a36      	ldr	r2, [pc, #216]	@ (80013b0 <main+0x310>)
 80012d6:	6013      	str	r3, [r2, #0]
	  			PrecCounterValue_A = 20000;
 80012d8:	4b41      	ldr	r3, [pc, #260]	@ (80013e0 <main+0x340>)
 80012da:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80012de:	601a      	str	r2, [r3, #0]
	  			TIM4->CNT = 20000;
 80012e0:	4b32      	ldr	r3, [pc, #200]	@ (80013ac <main+0x30c>)
 80012e2:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80012e6:	625a      	str	r2, [r3, #36]	@ 0x24
	  			change = 1;
 80012e8:	4b3e      	ldr	r3, [pc, #248]	@ (80013e4 <main+0x344>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]
	  		}

	  		if (counterValue_B <= 19800 && DirB == 2) {
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <main+0x32c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f644 5258 	movw	r2, #19800	@ 0x4d58
 80012f6:	4293      	cmp	r3, r2
 80012f8:	dc38      	bgt.n	800136c <main+0x2cc>
 80012fa:	4b3b      	ldr	r3, [pc, #236]	@ (80013e8 <main+0x348>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d134      	bne.n	800136c <main+0x2cc>
	  			int time = currentMillis - preViousMillis_B;
 8001302:	4b30      	ldr	r3, [pc, #192]	@ (80013c4 <main+0x324>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	4b2b      	ldr	r3, [pc, #172]	@ (80013b4 <main+0x314>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	61fb      	str	r3, [r7, #28]
	  			float speedy = ((float) 60000 / (float) time)
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80013d4 <main+0x334>
 800131c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	  					* ((float) (20000 - (TIM2->CNT)) / (float) 2000);
 8001320:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	f5c3 439c 	rsb	r3, r3, #19968	@ 0x4e00
 800132a:	3320      	adds	r3, #32
 800132c:	ee07 3a90 	vmov	s15, r3
 8001330:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001334:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 80013d8 <main+0x338>
 8001338:	eec6 7a86 	vdiv.f32	s15, s13, s12
	  			float speedy = ((float) 60000 / (float) time)
 800133c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001340:	edc7 7a06 	vstr	s15, [r7, #24]
	  			RPMB = (int) speedy;
 8001344:	edd7 7a06 	vldr	s15, [r7, #24]
 8001348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800134c:	ee17 2a90 	vmov	r2, s15
 8001350:	4b26      	ldr	r3, [pc, #152]	@ (80013ec <main+0x34c>)
 8001352:	601a      	str	r2, [r3, #0]

	  			preViousMillis_B = currentMillis;
 8001354:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <main+0x324>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a16      	ldr	r2, [pc, #88]	@ (80013b4 <main+0x314>)
 800135a:	6013      	str	r3, [r2, #0]
	  			TIM2->CNT = 20000;
 800135c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001360:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001364:	625a      	str	r2, [r3, #36]	@ 0x24
	  			change = 1;
 8001366:	4b1f      	ldr	r3, [pc, #124]	@ (80013e4 <main+0x344>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
	  		}

	  		if ((currentMillis - PrevChckStop) > 500) {
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <main+0x324>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <main+0x320>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800137a:	d95c      	bls.n	8001436 <main+0x396>
	  			if (NL == PrevNL && RPMB > 20) {
 800137c:	4b1d      	ldr	r3, [pc, #116]	@ (80013f4 <main+0x354>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001386:	eeb4 7a67 	vcmp.f32	s14, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	d137      	bne.n	8001400 <main+0x360>
 8001390:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <main+0x34c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b14      	cmp	r3, #20
 8001396:	e02f      	b.n	80013f8 <main+0x358>
 8001398:	200002b8 	.word	0x200002b8
 800139c:	200001c4 	.word	0x200001c4
 80013a0:	20000134 	.word	0x20000134
 80013a4:	2000017c 	.word	0x2000017c
 80013a8:	200000ec 	.word	0x200000ec
 80013ac:	40000800 	.word	0x40000800
 80013b0:	2000030c 	.word	0x2000030c
 80013b4:	20000350 	.word	0x20000350
 80013b8:	20000270 	.word	0x20000270
 80013bc:	200002e4 	.word	0x200002e4
 80013c0:	20000310 	.word	0x20000310
 80013c4:	200002e0 	.word	0x200002e0
 80013c8:	20000314 	.word	0x20000314
 80013cc:	20000354 	.word	0x20000354
 80013d0:	2000000c 	.word	0x2000000c
 80013d4:	476a6000 	.word	0x476a6000
 80013d8:	44fa0000 	.word	0x44fa0000
 80013dc:	20000308 	.word	0x20000308
 80013e0:	200002e8 	.word	0x200002e8
 80013e4:	2000026c 	.word	0x2000026c
 80013e8:	2000001c 	.word	0x2000001c
 80013ec:	2000034c 	.word	0x2000034c
 80013f0:	200002ec 	.word	0x200002ec
 80013f4:	200002f8 	.word	0x200002f8
 80013f8:	dd02      	ble.n	8001400 <main+0x360>
	  				RPMB = 0;
 80013fa:	4b95      	ldr	r3, [pc, #596]	@ (8001650 <main+0x5b0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]

	  			}
	  			if (NR == PrevNR && RPMB > 20) {
 8001400:	4b94      	ldr	r3, [pc, #592]	@ (8001654 <main+0x5b4>)
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800140a:	eeb4 7a67 	vcmp.f32	s14, s15
 800140e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001412:	d106      	bne.n	8001422 <main+0x382>
 8001414:	4b8e      	ldr	r3, [pc, #568]	@ (8001650 <main+0x5b0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b14      	cmp	r3, #20
 800141a:	dd02      	ble.n	8001422 <main+0x382>
	  				RPMA = 0;
 800141c:	4b8e      	ldr	r3, [pc, #568]	@ (8001658 <main+0x5b8>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
	  			}

	  			PrevNL = NL;
 8001422:	4b8e      	ldr	r3, [pc, #568]	@ (800165c <main+0x5bc>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	63bb      	str	r3, [r7, #56]	@ 0x38
	  			PrevNR = NR;
 8001428:	4b8a      	ldr	r3, [pc, #552]	@ (8001654 <main+0x5b4>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  			PrevChckStop = currentMillis;
 800142e:	4b8c      	ldr	r3, [pc, #560]	@ (8001660 <main+0x5c0>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a8c      	ldr	r2, [pc, #560]	@ (8001664 <main+0x5c4>)
 8001434:	6013      	str	r3, [r2, #0]

	  		}

	  		if ((counterValue_A - PrecCounterValue_A) > 8 || (counterValue_A - PrecCounterValue_A) < -8) {
 8001436:	4b8c      	ldr	r3, [pc, #560]	@ (8001668 <main+0x5c8>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	4b8c      	ldr	r3, [pc, #560]	@ (800166c <main+0x5cc>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b08      	cmp	r3, #8
 8001442:	dc07      	bgt.n	8001454 <main+0x3b4>
 8001444:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <main+0x5c8>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b88      	ldr	r3, [pc, #544]	@ (800166c <main+0x5cc>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	f113 0f08 	cmn.w	r3, #8
 8001452:	da16      	bge.n	8001482 <main+0x3e2>
	  			NR = NR + 0.004;
 8001454:	4b7f      	ldr	r3, [pc, #508]	@ (8001654 <main+0x5b4>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f9a7 	bl	80007ac <__aeabi_f2d>
 800145e:	a37a      	add	r3, pc, #488	@ (adr r3, 8001648 <main+0x5a8>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7ff f844 	bl	80004f0 <__adddf3>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fa1c 	bl	80008ac <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	4a77      	ldr	r2, [pc, #476]	@ (8001654 <main+0x5b4>)
 8001478:	6013      	str	r3, [r2, #0]
	  			PrecCounterValue_A=counterValue_A;
 800147a:	4b7b      	ldr	r3, [pc, #492]	@ (8001668 <main+0x5c8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a7b      	ldr	r2, [pc, #492]	@ (800166c <main+0x5cc>)
 8001480:	6013      	str	r3, [r2, #0]
	  		}

	  		if ((counterValue_B - PrecCounterValue_B) > 8 || (counterValue_B - PrecCounterValue_B) < -8) {
 8001482:	4b7b      	ldr	r3, [pc, #492]	@ (8001670 <main+0x5d0>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	4b7b      	ldr	r3, [pc, #492]	@ (8001674 <main+0x5d4>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b08      	cmp	r3, #8
 800148e:	dc07      	bgt.n	80014a0 <main+0x400>
 8001490:	4b77      	ldr	r3, [pc, #476]	@ (8001670 <main+0x5d0>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b77      	ldr	r3, [pc, #476]	@ (8001674 <main+0x5d4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	f113 0f08 	cmn.w	r3, #8
 800149e:	da16      	bge.n	80014ce <main+0x42e>
	  			NL = NL + 0.004;
 80014a0:	4b6e      	ldr	r3, [pc, #440]	@ (800165c <main+0x5bc>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f981 	bl	80007ac <__aeabi_f2d>
 80014aa:	a367      	add	r3, pc, #412	@ (adr r3, 8001648 <main+0x5a8>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f81e 	bl	80004f0 <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff f9f6 	bl	80008ac <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a66      	ldr	r2, [pc, #408]	@ (800165c <main+0x5bc>)
 80014c4:	6013      	str	r3, [r2, #0]
	  			PrecCounterValue_B=counterValue_B;
 80014c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001670 <main+0x5d0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001674 <main+0x5d4>)
 80014cc:	6013      	str	r3, [r2, #0]
	  		}

	  		if (SetRPM_B == 0) {
 80014ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <main+0x5d8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10a      	bne.n	80014ec <main+0x44c>
	  			motorB_RUN(0);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fc80 	bl	8000ddc <motorB_RUN>
	  			TIM2->CNT = 20000;
 80014dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014e0:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24
	  			RPMB = 0;
 80014e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001650 <main+0x5b0>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
	  		}

	  		if (SetRPM_A == 0) {
 80014ec:	4b63      	ldr	r3, [pc, #396]	@ (800167c <main+0x5dc>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <main+0x468>
	  			motorA_RUN(0);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f7ff fc25 	bl	8000d44 <motorA_RUN>
	  			TIM4->CNT = 20000;
 80014fa:	4b61      	ldr	r3, [pc, #388]	@ (8001680 <main+0x5e0>)
 80014fc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
	  			RPMA = 0;
 8001502:	4b55      	ldr	r3, [pc, #340]	@ (8001658 <main+0x5b8>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
	  //			NL = NL + (tencountL / 10);
	  //			tencountL = 0;
	  //			tencountR = 0;
	  //		}

	  		if (DirA == 1) {
 8001508:	4b5e      	ldr	r3, [pc, #376]	@ (8001684 <main+0x5e4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d102      	bne.n	8001516 <main+0x476>
	  			DirMutA = 1;
 8001510:	4b5d      	ldr	r3, [pc, #372]	@ (8001688 <main+0x5e8>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
	  		}
	  		if (DirB == 1) {
 8001516:	4b5d      	ldr	r3, [pc, #372]	@ (800168c <main+0x5ec>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d102      	bne.n	8001524 <main+0x484>
	  			DirMutB = 1;
 800151e:	4b5c      	ldr	r3, [pc, #368]	@ (8001690 <main+0x5f0>)
 8001520:	2201      	movs	r2, #1
 8001522:	601a      	str	r2, [r3, #0]
	  		}
	  		if (DirA == 2) {
 8001524:	4b57      	ldr	r3, [pc, #348]	@ (8001684 <main+0x5e4>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d103      	bne.n	8001534 <main+0x494>
	  			DirMutA = -1;
 800152c:	4b56      	ldr	r3, [pc, #344]	@ (8001688 <main+0x5e8>)
 800152e:	f04f 32ff 	mov.w	r2, #4294967295
 8001532:	601a      	str	r2, [r3, #0]
	  		}
	  		if (DirB == 2) {
 8001534:	4b55      	ldr	r3, [pc, #340]	@ (800168c <main+0x5ec>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d103      	bne.n	8001544 <main+0x4a4>
	  			DirMutB = -1;
 800153c:	4b54      	ldr	r3, [pc, #336]	@ (8001690 <main+0x5f0>)
 800153e:	f04f 32ff 	mov.w	r2, #4294967295
 8001542:	601a      	str	r2, [r3, #0]
	  		}

	  		if ((currentMillis - PrevPID) >= 50 && NewCmd == 0 && change == 1) {
 8001544:	4b46      	ldr	r3, [pc, #280]	@ (8001660 <main+0x5c0>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b52      	ldr	r3, [pc, #328]	@ (8001694 <main+0x5f4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b31      	cmp	r3, #49	@ 0x31
 8001550:	d93b      	bls.n	80015ca <main+0x52a>
 8001552:	4b51      	ldr	r3, [pc, #324]	@ (8001698 <main+0x5f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d137      	bne.n	80015ca <main+0x52a>
 800155a:	4b50      	ldr	r3, [pc, #320]	@ (800169c <main+0x5fc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d133      	bne.n	80015ca <main+0x52a>

	  			PWM_A = PWM_A + PID_A(RPMA);
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <main+0x5b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fcf0 	bl	8000f4c <PID_A>
 800156c:	eeb0 7a40 	vmov.f32	s14, s0
 8001570:	4b4b      	ldr	r3, [pc, #300]	@ (80016a0 <main+0x600>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157a:	4b49      	ldr	r3, [pc, #292]	@ (80016a0 <main+0x600>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
	  			PWM_B = PWM_B + PID_B(RPMB);
 8001580:	4b33      	ldr	r3, [pc, #204]	@ (8001650 <main+0x5b0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fd35 	bl	8000ff4 <PID_B>
 800158a:	eeb0 7a40 	vmov.f32	s14, s0
 800158e:	4b45      	ldr	r3, [pc, #276]	@ (80016a4 <main+0x604>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001598:	4b42      	ldr	r3, [pc, #264]	@ (80016a4 <main+0x604>)
 800159a:	edc3 7a00 	vstr	s15, [r3]

	  			motorA_RUN((int)PWM_A);
 800159e:	4b40      	ldr	r3, [pc, #256]	@ (80016a0 <main+0x600>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015a8:	ee17 0a90 	vmov	r0, s15
 80015ac:	f7ff fbca 	bl	8000d44 <motorA_RUN>
	  			motorB_RUN((int)PWM_B);
 80015b0:	4b3c      	ldr	r3, [pc, #240]	@ (80016a4 <main+0x604>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015ba:	ee17 0a90 	vmov	r0, s15
 80015be:	f7ff fc0d 	bl	8000ddc <motorB_RUN>
	  			PrevPID = currentMillis;
 80015c2:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <main+0x5c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a33      	ldr	r2, [pc, #204]	@ (8001694 <main+0x5f4>)
 80015c8:	6013      	str	r3, [r2, #0]

	  		}

	  		if ((currentMillis - PrevSend) >= 33 && ReadyToSend == 1) {
 80015ca:	4b25      	ldr	r3, [pc, #148]	@ (8001660 <main+0x5c0>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b36      	ldr	r3, [pc, #216]	@ (80016a8 <main+0x608>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b20      	cmp	r3, #32
 80015d6:	f240 80ee 	bls.w	80017b6 <main+0x716>
 80015da:	4b34      	ldr	r3, [pc, #208]	@ (80016ac <main+0x60c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 80e9 	bne.w	80017b6 <main+0x716>
	  		    int RightTurns = (int) (NR * 1000);
 80015e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <main+0x5b4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80016b0 <main+0x610>
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f6:	ee17 3a90 	vmov	r3, s15
 80015fa:	617b      	str	r3, [r7, #20]
	  		    int LeftTurns = (int) (NL * 1000);
 80015fc:	4b17      	ldr	r3, [pc, #92]	@ (800165c <main+0x5bc>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80016b0 <main+0x610>
 8001606:	ee67 7a87 	vmul.f32	s15, s15, s14
 800160a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160e:	ee17 3a90 	vmov	r3, s15
 8001612:	613b      	str	r3, [r7, #16]

	  		    if (RightTurns <= 8) {
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	2b08      	cmp	r3, #8
 8001618:	dc01      	bgt.n	800161e <main+0x57e>
	  		        RightTurns = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
	  		    }
	  		    if (LeftTurns <= 8) {
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	2b08      	cmp	r3, #8
 8001622:	dc01      	bgt.n	8001628 <main+0x588>
	  		        LeftTurns = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	613b      	str	r3, [r7, #16]
	  		    }

	  		    char directionalityA[2];
	  		    char directionalityB[2];

	  		    if (DirMutA < 0) {
 8001628:	4b17      	ldr	r3, [pc, #92]	@ (8001688 <main+0x5e8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	da02      	bge.n	8001636 <main+0x596>
	  		        strcpy(directionalityA, "n");
 8001630:	236e      	movs	r3, #110	@ 0x6e
 8001632:	80bb      	strh	r3, [r7, #4]
 8001634:	e001      	b.n	800163a <main+0x59a>
	  		    } else {
	  		        strcpy(directionalityA, "p");
 8001636:	2370      	movs	r3, #112	@ 0x70
 8001638:	80bb      	strh	r3, [r7, #4]
	  		    }

	  		    if (DirMutB < 0) {
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <main+0x5f0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	da38      	bge.n	80016b4 <main+0x614>
	  		        strcpy(directionalityB, "n");
 8001642:	236e      	movs	r3, #110	@ 0x6e
 8001644:	803b      	strh	r3, [r7, #0]
 8001646:	e037      	b.n	80016b8 <main+0x618>
 8001648:	d2f1a9fc 	.word	0xd2f1a9fc
 800164c:	3f70624d 	.word	0x3f70624d
 8001650:	2000034c 	.word	0x2000034c
 8001654:	200002fc 	.word	0x200002fc
 8001658:	20000308 	.word	0x20000308
 800165c:	200002f8 	.word	0x200002f8
 8001660:	200002e0 	.word	0x200002e0
 8001664:	20000310 	.word	0x20000310
 8001668:	20000314 	.word	0x20000314
 800166c:	200002e8 	.word	0x200002e8
 8001670:	20000354 	.word	0x20000354
 8001674:	200002ec 	.word	0x200002ec
 8001678:	20000344 	.word	0x20000344
 800167c:	20000300 	.word	0x20000300
 8001680:	40000800 	.word	0x40000800
 8001684:	2000000c 	.word	0x2000000c
 8001688:	20000004 	.word	0x20000004
 800168c:	2000001c 	.word	0x2000001c
 8001690:	20000008 	.word	0x20000008
 8001694:	200002e4 	.word	0x200002e4
 8001698:	200002b4 	.word	0x200002b4
 800169c:	2000026c 	.word	0x2000026c
 80016a0:	20000304 	.word	0x20000304
 80016a4:	20000348 	.word	0x20000348
 80016a8:	20000270 	.word	0x20000270
 80016ac:	20000000 	.word	0x20000000
 80016b0:	447a0000 	.word	0x447a0000
	  		    } else {
	  		        strcpy(directionalityB, "p");
 80016b4:	2370      	movs	r3, #112	@ 0x70
 80016b6:	803b      	strh	r3, [r7, #0]
	  		    }

	  		    // Convert RPM values to integers by multiplying by 1000 to keep 3 decimal places
	  		    int RPMA_int = (int)((RPMA * 0.10472) * 1000);
 80016b8:	4b53      	ldr	r3, [pc, #332]	@ (8001808 <main+0x768>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff f863 	bl	8000788 <__aeabi_i2d>
 80016c2:	a34f      	add	r3, pc, #316	@ (adr r3, 8001800 <main+0x760>)
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	f7fe fde2 	bl	8000290 <__aeabi_dmul>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4610      	mov	r0, r2
 80016d2:	4619      	mov	r1, r3
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	4b4c      	ldr	r3, [pc, #304]	@ (800180c <main+0x76c>)
 80016da:	f7fe fdd9 	bl	8000290 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff f8b9 	bl	800085c <__aeabi_d2iz>
 80016ea:	4603      	mov	r3, r0
 80016ec:	60fb      	str	r3, [r7, #12]
	  		    int RPMB_int = (int)((RPMB * 0.10472) * 1000);
 80016ee:	4b48      	ldr	r3, [pc, #288]	@ (8001810 <main+0x770>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff f848 	bl	8000788 <__aeabi_i2d>
 80016f8:	a341      	add	r3, pc, #260	@ (adr r3, 8001800 <main+0x760>)
 80016fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fe:	f7fe fdc7 	bl	8000290 <__aeabi_dmul>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4610      	mov	r0, r2
 8001708:	4619      	mov	r1, r3
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b3f      	ldr	r3, [pc, #252]	@ (800180c <main+0x76c>)
 8001710:	f7fe fdbe 	bl	8000290 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff f89e 	bl	800085c <__aeabi_d2iz>
 8001720:	4603      	mov	r3, r0
 8001722:	60bb      	str	r3, [r7, #8]

	  		    // Send the integer values, dividing by 1000 when printing to get back float format
	  		    sprintf(send, " r%s %d.%03d,l%s %d.%03d,\n",directionalityA, RPMA_int / 1000, abs(RPMA_int % 1000), directionalityB, RPMB_int / 1000, abs(RPMB_int % 1000));
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a3b      	ldr	r2, [pc, #236]	@ (8001814 <main+0x774>)
 8001728:	fb82 1203 	smull	r1, r2, r2, r3
 800172c:	1192      	asrs	r2, r2, #6
 800172e:	17db      	asrs	r3, r3, #31
 8001730:	1ad5      	subs	r5, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	4b37      	ldr	r3, [pc, #220]	@ (8001814 <main+0x774>)
 8001736:	fb83 1302 	smull	r1, r3, r3, r2
 800173a:	1199      	asrs	r1, r3, #6
 800173c:	17d3      	asrs	r3, r2, #31
 800173e:	1acb      	subs	r3, r1, r3
 8001740:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001744:	fb01 f303 	mul.w	r3, r1, r3
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800174e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	4a2f      	ldr	r2, [pc, #188]	@ (8001814 <main+0x774>)
 8001756:	fb82 0203 	smull	r0, r2, r2, r3
 800175a:	1192      	asrs	r2, r2, #6
 800175c:	17db      	asrs	r3, r3, #31
 800175e:	1ad0      	subs	r0, r2, r3
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <main+0x774>)
 8001764:	fb83 4302 	smull	r4, r3, r3, r2
 8001768:	119c      	asrs	r4, r3, #6
 800176a:	17d3      	asrs	r3, r2, #31
 800176c:	1ae3      	subs	r3, r4, r3
 800176e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8001772:	fb04 f303 	mul.w	r3, r4, r3
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	bfb8      	it	lt
 800177c:	425b      	neglt	r3, r3
 800177e:	1d3a      	adds	r2, r7, #4
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	9002      	str	r0, [sp, #8]
 8001784:	463b      	mov	r3, r7
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9100      	str	r1, [sp, #0]
 800178a:	462b      	mov	r3, r5
 800178c:	4922      	ldr	r1, [pc, #136]	@ (8001818 <main+0x778>)
 800178e:	4823      	ldr	r0, [pc, #140]	@ (800181c <main+0x77c>)
 8001790:	f004 f96c 	bl	8005a6c <siprintf>

	  		    HAL_UART_Transmit_IT(&huart1, (uint8_t*)send, strlen(send));
 8001794:	4821      	ldr	r0, [pc, #132]	@ (800181c <main+0x77c>)
 8001796:	f7fe fd23 	bl	80001e0 <strlen>
 800179a:	4603      	mov	r3, r0
 800179c:	b29b      	uxth	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	491e      	ldr	r1, [pc, #120]	@ (800181c <main+0x77c>)
 80017a2:	481f      	ldr	r0, [pc, #124]	@ (8001820 <main+0x780>)
 80017a4:	f003 f882 	bl	80048ac <HAL_UART_Transmit_IT>

	  		    ReadyToSend = 0;
 80017a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001824 <main+0x784>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
	  		    PrevSend = currentMillis;
 80017ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001828 <main+0x788>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a1e      	ldr	r2, [pc, #120]	@ (800182c <main+0x78c>)
 80017b4:	6013      	str	r3, [r2, #0]
	  		}


	  		if (NewCmd == 1) {
 80017b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001830 <main+0x790>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	f47f acc2 	bne.w	8001144 <main+0xa4>
	  			NewCmd = 0;
 80017c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001830 <main+0x790>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
	  			if (DirA == 0) {
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <main+0x794>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <main+0x73e>
	  				NR = 0;
 80017ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <main+0x798>)
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
	  				tencountR = 0;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <main+0x79c>)
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	  			}
	  			if (DirB == 0) {
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <main+0x7a0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f47f acae 	bne.w	8001144 <main+0xa4>
	  				NL = 0;
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <main+0x7a4>)
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	  				tencountL = 0;
 80017f0:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <main+0x7a8>)
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
	  currentMillis = HAL_GetTick();
 80017f8:	e4a4      	b.n	8001144 <main+0xa4>
 80017fa:	bf00      	nop
 80017fc:	f3af 8000 	nop.w
 8001800:	0f3cb3e5 	.word	0x0f3cb3e5
 8001804:	3fbaceee 	.word	0x3fbaceee
 8001808:	20000308 	.word	0x20000308
 800180c:	408f4000 	.word	0x408f4000
 8001810:	2000034c 	.word	0x2000034c
 8001814:	10624dd3 	.word	0x10624dd3
 8001818:	080063c4 	.word	0x080063c4
 800181c:	20000274 	.word	0x20000274
 8001820:	200001c4 	.word	0x200001c4
 8001824:	20000000 	.word	0x20000000
 8001828:	200002e0 	.word	0x200002e0
 800182c:	20000270 	.word	0x20000270
 8001830:	200002b4 	.word	0x200002b4
 8001834:	2000000c 	.word	0x2000000c
 8001838:	200002fc 	.word	0x200002fc
 800183c:	200002f0 	.word	0x200002f0
 8001840:	2000001c 	.word	0x2000001c
 8001844:	200002f8 	.word	0x200002f8
 8001848:	200002f4 	.word	0x200002f4

0800184c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b094      	sub	sp, #80	@ 0x50
 8001850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2230      	movs	r2, #48	@ 0x30
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f004 f926 	bl	8005aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a27      	ldr	r2, [pc, #156]	@ (8001918 <SystemClock_Config+0xcc>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <SystemClock_Config+0xcc>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001898:	4a20      	ldr	r2, [pc, #128]	@ (800191c <SystemClock_Config+0xd0>)
 800189a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <SystemClock_Config+0xd0>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018a8:	607b      	str	r3, [r7, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ac:	2302      	movs	r3, #2
 80018ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018b0:	2301      	movs	r3, #1
 80018b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018b4:	2310      	movs	r3, #16
 80018b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018bc:	2300      	movs	r3, #0
 80018be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018c0:	2308      	movs	r3, #8
 80018c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018c4:	2348      	movs	r3, #72	@ 0x48
 80018c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018c8:	2302      	movs	r3, #2
 80018ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018cc:	2304      	movs	r3, #4
 80018ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d0:	f107 0320 	add.w	r3, r7, #32
 80018d4:	4618      	mov	r0, r3
 80018d6:	f001 fbe5 	bl	80030a4 <HAL_RCC_OscConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018e0:	f000 fa48 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e4:	230f      	movs	r3, #15
 80018e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e8:	2302      	movs	r3, #2
 80018ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fa:	f107 030c 	add.w	r3, r7, #12
 80018fe:	2102      	movs	r1, #2
 8001900:	4618      	mov	r0, r3
 8001902:	f001 fe47 	bl	8003594 <HAL_RCC_ClockConfig>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800190c:	f000 fa32 	bl	8001d74 <Error_Handler>
  }
}
 8001910:	bf00      	nop
 8001912:	3750      	adds	r7, #80	@ 0x50
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000

08001920 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0308 	add.w	r3, r7, #8
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	463b      	mov	r3, r7
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800193c:	4b1e      	ldr	r3, [pc, #120]	@ (80019b8 <MX_TIM1_Init+0x98>)
 800193e:	4a1f      	ldr	r2, [pc, #124]	@ (80019bc <MX_TIM1_Init+0x9c>)
 8001940:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001942:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <MX_TIM1_Init+0x98>)
 8001944:	2200      	movs	r2, #0
 8001946:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001948:	4b1b      	ldr	r3, [pc, #108]	@ (80019b8 <MX_TIM1_Init+0x98>)
 800194a:	2200      	movs	r2, #0
 800194c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800194e:	4b1a      	ldr	r3, [pc, #104]	@ (80019b8 <MX_TIM1_Init+0x98>)
 8001950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001954:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <MX_TIM1_Init+0x98>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800195c:	4b16      	ldr	r3, [pc, #88]	@ (80019b8 <MX_TIM1_Init+0x98>)
 800195e:	2200      	movs	r2, #0
 8001960:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001962:	4b15      	ldr	r3, [pc, #84]	@ (80019b8 <MX_TIM1_Init+0x98>)
 8001964:	2200      	movs	r2, #0
 8001966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001968:	4813      	ldr	r0, [pc, #76]	@ (80019b8 <MX_TIM1_Init+0x98>)
 800196a:	f001 fff3 	bl	8003954 <HAL_TIM_Base_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001974:	f000 f9fe 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001978:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	4619      	mov	r1, r3
 8001984:	480c      	ldr	r0, [pc, #48]	@ (80019b8 <MX_TIM1_Init+0x98>)
 8001986:	f002 fb33 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001990:	f000 f9f0 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001994:	2300      	movs	r3, #0
 8001996:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_TIM1_Init+0x98>)
 80019a2:	f002 fec5 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80019ac:	f000 f9e2 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200000a4 	.word	0x200000a4
 80019bc:	40010000 	.word	0x40010000

080019c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08c      	sub	sp, #48	@ 0x30
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c6:	f107 030c 	add.w	r3, r7, #12
 80019ca:	2224      	movs	r2, #36	@ 0x24
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f004 f86c 	bl	8005aac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019dc:	4b21      	ldr	r3, [pc, #132]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 80019de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 80019f2:	f04f 32ff 	mov.w	r2, #4294967295
 80019f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a04:	2303      	movs	r3, #3
 8001a06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8001a14:	2303      	movs	r3, #3
 8001a16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001a24:	2305      	movs	r3, #5
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a28:	f107 030c 	add.w	r3, r7, #12
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 8001a30:	f002 f8e8 	bl	8003c04 <HAL_TIM_Encoder_Init>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a3a:	f000 f99b 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	@ (8001a64 <MX_TIM2_Init+0xa4>)
 8001a4c:	f002 fe70 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a56:	f000 f98d 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	3730      	adds	r7, #48	@ 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	200000ec 	.word	0x200000ec

08001a68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	@ 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	60da      	str	r2, [r3, #12]
 8001a92:	611a      	str	r2, [r3, #16]
 8001a94:	615a      	str	r2, [r3, #20]
 8001a96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a98:	4b31      	ldr	r3, [pc, #196]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001a9a:	4a32      	ldr	r2, [pc, #200]	@ (8001b64 <MX_TIM3_Init+0xfc>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8001a9e:	4b30      	ldr	r3, [pc, #192]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001aa0:	2248      	movs	r2, #72	@ 0x48
 8001aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001aac:	22ff      	movs	r2, #255	@ 0xff
 8001aae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001abc:	4828      	ldr	r0, [pc, #160]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001abe:	f001 ff49 	bl	8003954 <HAL_TIM_Base_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ac8:	f000 f954 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ad2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4821      	ldr	r0, [pc, #132]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001ada:	f002 fa89 	bl	8003ff0 <HAL_TIM_ConfigClockSource>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ae4:	f000 f946 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae8:	481d      	ldr	r0, [pc, #116]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001aea:	f001 ff82 	bl	80039f2 <HAL_TIM_PWM_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001af4:	f000 f93e 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b00:	f107 0320 	add.w	r3, r7, #32
 8001b04:	4619      	mov	r1, r3
 8001b06:	4816      	ldr	r0, [pc, #88]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001b08:	f002 fe12 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001b12:	f000 f92f 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b16:	2360      	movs	r3, #96	@ 0x60
 8001b18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	2208      	movs	r2, #8
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480c      	ldr	r0, [pc, #48]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001b2e:	f002 f99d 	bl	8003e6c <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001b38:	f000 f91c 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	220c      	movs	r2, #12
 8001b40:	4619      	mov	r1, r3
 8001b42:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001b44:	f002 f992 	bl	8003e6c <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 8001b4e:	f000 f911 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b52:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM3_Init+0xf8>)
 8001b54:	f000 fa0e 	bl	8001f74 <HAL_TIM_MspPostInit>

}
 8001b58:	bf00      	nop
 8001b5a:	3738      	adds	r7, #56	@ 0x38
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	20000134 	.word	0x20000134
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	@ 0x30
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b6e:	f107 030c 	add.w	r3, r7, #12
 8001b72:	2224      	movs	r2, #36	@ 0x24
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 ff98 	bl	8005aac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001b86:	4a21      	ldr	r2, [pc, #132]	@ (8001c0c <MX_TIM4_Init+0xa4>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001b8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1d      	ldr	r3, [pc, #116]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b96:	4b1c      	ldr	r3, [pc, #112]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001b98:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001baa:	2303      	movs	r3, #3
 8001bac:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001bce:	f107 030c 	add.w	r3, r7, #12
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001bd6:	f002 f815 	bl	8003c04 <HAL_TIM_Encoder_Init>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001be0:	f000 f8c8 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be8:	2300      	movs	r3, #0
 8001bea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bec:	1d3b      	adds	r3, r7, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <MX_TIM4_Init+0xa0>)
 8001bf2:	f002 fd9d 	bl	8004730 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001bfc:	f000 f8ba 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3730      	adds	r7, #48	@ 0x30
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	2000017c 	.word	0x2000017c
 8001c0c:	40000800 	.word	0x40000800

08001c10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c14:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c16:	4a12      	ldr	r2, [pc, #72]	@ (8001c60 <MX_USART1_UART_Init+0x50>)
 8001c18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c34:	4b09      	ldr	r3, [pc, #36]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c36:	220c      	movs	r2, #12
 8001c38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3a:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c40:	4b06      	ldr	r3, [pc, #24]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c46:	4805      	ldr	r0, [pc, #20]	@ (8001c5c <MX_USART1_UART_Init+0x4c>)
 8001c48:	f002 fde0 	bl	800480c <HAL_UART_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c52:	f000 f88f 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200001c4 	.word	0x200001c4
 8001c60:	40011000 	.word	0x40011000

08001c64 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ca0 <MX_DMA_Init+0x3c>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca0 <MX_DMA_Init+0x3c>)
 8001c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b09      	ldr	r3, [pc, #36]	@ (8001ca0 <MX_DMA_Init+0x3c>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2044      	movs	r0, #68	@ 0x44
 8001c8c:	f000 fc33 	bl	80024f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8001c90:	2044      	movs	r0, #68	@ 0x44
 8001c92:	f000 fc4c 	bl	800252e <HAL_NVIC_EnableIRQ>

}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023800 	.word	0x40023800

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a29      	ldr	r2, [pc, #164]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001cc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	60bb      	str	r3, [r7, #8]
 8001cd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	4b23      	ldr	r3, [pc, #140]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a22      	ldr	r2, [pc, #136]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b20      	ldr	r3, [pc, #128]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0301 	and.w	r3, r3, #1
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <MX_GPIO_Init+0xc4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	21c0      	movs	r1, #192	@ 0xc0
 8001d12:	4816      	ldr	r0, [pc, #88]	@ (8001d6c <MX_GPIO_Init+0xc8>)
 8001d14:	f001 f9ac 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_10, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f240 4104 	movw	r1, #1028	@ 0x404
 8001d1e:	4814      	ldr	r0, [pc, #80]	@ (8001d70 <MX_GPIO_Init+0xcc>)
 8001d20:	f001 f9a6 	bl	8003070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d24:	23c0      	movs	r3, #192	@ 0xc0
 8001d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d34:	f107 030c 	add.w	r3, r7, #12
 8001d38:	4619      	mov	r1, r3
 8001d3a:	480c      	ldr	r0, [pc, #48]	@ (8001d6c <MX_GPIO_Init+0xc8>)
 8001d3c:	f001 f814 	bl	8002d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8001d40:	f240 4304 	movw	r3, #1028	@ 0x404
 8001d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d46:	2301      	movs	r3, #1
 8001d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	@ (8001d70 <MX_GPIO_Init+0xcc>)
 8001d5a:	f001 f805 	bl	8002d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d5e:	bf00      	nop
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020400 	.word	0x40020400

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <Error_Handler+0x8>

08001d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	607b      	str	r3, [r7, #4]
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	4a0f      	ldr	r2, [pc, #60]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	4b09      	ldr	r3, [pc, #36]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	4a08      	ldr	r2, [pc, #32]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001db2:	4b06      	ldr	r3, [pc, #24]	@ (8001dcc <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800

08001dd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a15      	ldr	r2, [pc, #84]	@ (8001e34 <HAL_TIM_Base_MspInit+0x64>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d10e      	bne.n	8001e00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b14      	ldr	r3, [pc, #80]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	4a13      	ldr	r2, [pc, #76]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001df2:	4b11      	ldr	r3, [pc, #68]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001dfe:	e012      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <HAL_TIM_Base_MspInit+0x6c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001e14:	f043 0302 	orr.w	r3, r3, #2
 8001e18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1a:	4b07      	ldr	r3, [pc, #28]	@ (8001e38 <HAL_TIM_Base_MspInit+0x68>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
}
 8001e26:	bf00      	nop
 8001e28:	3714      	adds	r7, #20
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40000400 	.word	0x40000400

08001e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	@ 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e60:	d14b      	bne.n	8001efa <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b3f      	ldr	r3, [pc, #252]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e72:	4b3c      	ldr	r3, [pc, #240]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b38      	ldr	r3, [pc, #224]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	4a37      	ldr	r2, [pc, #220]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8e:	4b35      	ldr	r3, [pc, #212]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	613b      	str	r3, [r7, #16]
 8001e9e:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	613b      	str	r3, [r7, #16]
 8001eb4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001eba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ecc:	f107 031c 	add.w	r3, r7, #28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4825      	ldr	r0, [pc, #148]	@ (8001f68 <HAL_TIM_Encoder_MspInit+0x128>)
 8001ed4:	f000 ff48 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed8:	2308      	movs	r3, #8
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	481e      	ldr	r0, [pc, #120]	@ (8001f6c <HAL_TIM_Encoder_MspInit+0x12c>)
 8001ef4:	f000 ff38 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ef8:	e030      	b.n	8001f5c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM4)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_TIM_Encoder_MspInit+0x130>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d12b      	bne.n	8001f5c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]
 8001f08:	4b16      	ldr	r3, [pc, #88]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0c:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f0e:	f043 0304 	orr.w	r3, r3, #4
 8001f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	2300      	movs	r3, #0
 8001f22:	60bb      	str	r3, [r7, #8]
 8001f24:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f28:	4a0e      	ldr	r2, [pc, #56]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f3c:	23c0      	movs	r3, #192	@ 0xc0
 8001f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f40:	2302      	movs	r3, #2
 8001f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f50:	f107 031c 	add.w	r3, r7, #28
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <HAL_TIM_Encoder_MspInit+0x12c>)
 8001f58:	f000 ff06 	bl	8002d68 <HAL_GPIO_Init>
}
 8001f5c:	bf00      	nop
 8001f5e:	3730      	adds	r7, #48	@ 0x30
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40023800 	.word	0x40023800
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	40020400 	.word	0x40020400
 8001f70:	40000800 	.word	0x40000800

08001f74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a12      	ldr	r2, [pc, #72]	@ (8001fdc <HAL_TIM_MspPostInit+0x68>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d11d      	bne.n	8001fd2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	4a10      	ldr	r2, [pc, #64]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fa0:	f043 0302 	orr.w	r3, r3, #2
 8001fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe0 <HAL_TIM_MspPostInit+0x6c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 030c 	add.w	r3, r7, #12
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	@ (8001fe4 <HAL_TIM_MspPostInit+0x70>)
 8001fce:	f000 fecb 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001fd2:	bf00      	nop
 8001fd4:	3720      	adds	r7, #32
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	40000400 	.word	0x40000400
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40020400 	.word	0x40020400

08001fe8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b08a      	sub	sp, #40	@ 0x28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]
 8001ffa:	609a      	str	r2, [r3, #8]
 8001ffc:	60da      	str	r2, [r3, #12]
 8001ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a35      	ldr	r2, [pc, #212]	@ (80020dc <HAL_UART_MspInit+0xf4>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d163      	bne.n	80020d2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b34      	ldr	r3, [pc, #208]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002012:	4a33      	ldr	r2, [pc, #204]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 8002014:	f043 0310 	orr.w	r3, r3, #16
 8002018:	6453      	str	r3, [r2, #68]	@ 0x44
 800201a:	4b31      	ldr	r3, [pc, #196]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a2c      	ldr	r2, [pc, #176]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b2a      	ldr	r3, [pc, #168]	@ (80020e0 <HAL_UART_MspInit+0xf8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002042:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002054:	2307      	movs	r3, #7
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002058:	f107 0314 	add.w	r3, r7, #20
 800205c:	4619      	mov	r1, r3
 800205e:	4821      	ldr	r0, [pc, #132]	@ (80020e4 <HAL_UART_MspInit+0xfc>)
 8002060:	f000 fe82 	bl	8002d68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002064:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 8002066:	4a21      	ldr	r2, [pc, #132]	@ (80020ec <HAL_UART_MspInit+0x104>)
 8002068:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800206a:	4b1f      	ldr	r3, [pc, #124]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 800206c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002070:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002072:	4b1d      	ldr	r3, [pc, #116]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002078:	4b1b      	ldr	r3, [pc, #108]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 800207a:	2200      	movs	r2, #0
 800207c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800207e:	4b1a      	ldr	r3, [pc, #104]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 8002080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002084:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002086:	4b18      	ldr	r3, [pc, #96]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 8002088:	2200      	movs	r2, #0
 800208a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800208c:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 800208e:	2200      	movs	r2, #0
 8002090:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 8002094:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002098:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800209a:	4b13      	ldr	r3, [pc, #76]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020a0:	4b11      	ldr	r3, [pc, #68]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80020a6:	4810      	ldr	r0, [pc, #64]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 80020a8:	f000 fa5c 	bl	8002564 <HAL_DMA_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80020b2:	f7ff fe5f 	bl	8001d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 80020ba:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_UART_MspInit+0x100>)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2025      	movs	r0, #37	@ 0x25
 80020c8:	f000 fa15 	bl	80024f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80020cc:	2025      	movs	r0, #37	@ 0x25
 80020ce:	f000 fa2e 	bl	800252e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80020d2:	bf00      	nop
 80020d4:	3728      	adds	r7, #40	@ 0x28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40011000 	.word	0x40011000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000
 80020e8:	2000020c 	.word	0x2000020c
 80020ec:	40026488 	.word	0x40026488

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020f4:	bf00      	nop
 80020f6:	e7fd      	b.n	80020f4 <NMI_Handler+0x4>

080020f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <HardFault_Handler+0x4>

08002100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002104:	bf00      	nop
 8002106:	e7fd      	b.n	8002104 <MemManage_Handler+0x4>

08002108 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800210c:	bf00      	nop
 800210e:	e7fd      	b.n	800210c <BusFault_Handler+0x4>

08002110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002114:	bf00      	nop
 8002116:	e7fd      	b.n	8002114 <UsageFault_Handler+0x4>

08002118 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr

08002126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002146:	f000 f8db 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
	...

08002150 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <USART1_IRQHandler+0x10>)
 8002156:	f002 fc05 	bl	8004964 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	200001c4 	.word	0x200001c4

08002164 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <DMA2_Stream5_IRQHandler+0x10>)
 800216a:	f000 fb93 	bl	8002894 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000020c 	.word	0x2000020c

08002178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002180:	4a14      	ldr	r2, [pc, #80]	@ (80021d4 <_sbrk+0x5c>)
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <_sbrk+0x60>)
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800218c:	4b13      	ldr	r3, [pc, #76]	@ (80021dc <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002194:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <_sbrk+0x64>)
 8002196:	4a12      	ldr	r2, [pc, #72]	@ (80021e0 <_sbrk+0x68>)
 8002198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800219a:	4b10      	ldr	r3, [pc, #64]	@ (80021dc <_sbrk+0x64>)
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d207      	bcs.n	80021b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a8:	f003 fc88 	bl	8005abc <__errno>
 80021ac:	4603      	mov	r3, r0
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
 80021b6:	e009      	b.n	80021cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b8:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <_sbrk+0x64>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <_sbrk+0x64>)
 80021c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20010000 	.word	0x20010000
 80021d8:	00000400 	.word	0x00000400
 80021dc:	20000384 	.word	0x20000384
 80021e0:	200004d8 	.word	0x200004d8

080021e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <SystemInit+0x20>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ee:	4a05      	ldr	r2, [pc, #20]	@ (8002204 <SystemInit+0x20>)
 80021f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800220c:	f7ff ffea 	bl	80021e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002236:	f003 fc47 	bl	8005ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe ff31 	bl	80010a0 <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800224c:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8002250:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002254:	200004d4 	.word	0x200004d4

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	@ (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	@ (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	@ (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f92b 	bl	80024e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	200f      	movs	r0, #15
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fd76 	bl	8001d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	@ (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	@ (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f943 	bl	800254a <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f90b 	bl	80024f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	@ (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000002c 	.word	0x2000002c
 80022f8:	20000034 	.word	0x20000034
 80022fc:	20000030 	.word	0x20000030

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000034 	.word	0x20000034
 8002324:	20000388 	.word	0x20000388

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	@ (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20000388 	.word	0x20000388

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	@ (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4907      	ldr	r1, [pc, #28]	@ (80023dc <__NVIC_EnableIRQ+0x38>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000e100 	.word	0xe000e100

080023e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	6039      	str	r1, [r7, #0]
 80023ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	db0a      	blt.n	800240a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	490c      	ldr	r1, [pc, #48]	@ (800242c <__NVIC_SetPriority+0x4c>)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	0112      	lsls	r2, r2, #4
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	440b      	add	r3, r1
 8002404:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002408:	e00a      	b.n	8002420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	b2da      	uxtb	r2, r3
 800240e:	4908      	ldr	r1, [pc, #32]	@ (8002430 <__NVIC_SetPriority+0x50>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	3b04      	subs	r3, #4
 8002418:	0112      	lsls	r2, r2, #4
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	440b      	add	r3, r1
 800241e:	761a      	strb	r2, [r3, #24]
}
 8002420:	bf00      	nop
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000e100 	.word	0xe000e100
 8002430:	e000ed00 	.word	0xe000ed00

08002434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f1c3 0307 	rsb	r3, r3, #7
 800244e:	2b04      	cmp	r3, #4
 8002450:	bf28      	it	cs
 8002452:	2304      	movcs	r3, #4
 8002454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	3304      	adds	r3, #4
 800245a:	2b06      	cmp	r3, #6
 800245c:	d902      	bls.n	8002464 <NVIC_EncodePriority+0x30>
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	3b03      	subs	r3, #3
 8002462:	e000      	b.n	8002466 <NVIC_EncodePriority+0x32>
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002468:	f04f 32ff 	mov.w	r2, #4294967295
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43da      	mvns	r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	401a      	ands	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800247c:	f04f 31ff 	mov.w	r1, #4294967295
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	fa01 f303 	lsl.w	r3, r1, r3
 8002486:	43d9      	mvns	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800248c:	4313      	orrs	r3, r2
         );
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024ac:	d301      	bcc.n	80024b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ae:	2301      	movs	r3, #1
 80024b0:	e00f      	b.n	80024d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <SysTick_Config+0x40>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ba:	210f      	movs	r1, #15
 80024bc:	f04f 30ff 	mov.w	r0, #4294967295
 80024c0:	f7ff ff8e 	bl	80023e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <SysTick_Config+0x40>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ca:	4b04      	ldr	r3, [pc, #16]	@ (80024dc <SysTick_Config+0x40>)
 80024cc:	2207      	movs	r2, #7
 80024ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	e000e010 	.word	0xe000e010

080024e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff ff29 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024ee:	bf00      	nop
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b086      	sub	sp, #24
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	4603      	mov	r3, r0
 80024fe:	60b9      	str	r1, [r7, #8]
 8002500:	607a      	str	r2, [r7, #4]
 8002502:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002508:	f7ff ff3e 	bl	8002388 <__NVIC_GetPriorityGrouping>
 800250c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	6978      	ldr	r0, [r7, #20]
 8002514:	f7ff ff8e 	bl	8002434 <NVIC_EncodePriority>
 8002518:	4602      	mov	r2, r0
 800251a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800251e:	4611      	mov	r1, r2
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff ff5d 	bl	80023e0 <__NVIC_SetPriority>
}
 8002526:	bf00      	nop
 8002528:	3718      	adds	r7, #24
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff ff31 	bl	80023a4 <__NVIC_EnableIRQ>
}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7ff ffa2 	bl	800249c <SysTick_Config>
 8002558:	4603      	mov	r3, r0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002570:	f7ff feda 	bl	8002328 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e099      	b.n	80026b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025a0:	e00f      	b.n	80025c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a2:	f7ff fec1 	bl	8002328 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b05      	cmp	r3, #5
 80025ae:	d908      	bls.n	80025c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2220      	movs	r2, #32
 80025b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2203      	movs	r2, #3
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e078      	b.n	80026b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e8      	bne.n	80025a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <HAL_DMA_Init+0x158>)
 80025dc:	4013      	ands	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002618:	2b04      	cmp	r3, #4
 800261a:	d107      	bne.n	800262c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	4313      	orrs	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	f023 0307 	bic.w	r3, r3, #7
 8002642:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	4313      	orrs	r3, r2
 800264c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	2b04      	cmp	r3, #4
 8002654:	d117      	bne.n	8002686 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f000 fb01 	bl	8002c70 <DMA_CheckFifoParam>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d008      	beq.n	8002686 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2240      	movs	r2, #64	@ 0x40
 8002678:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002682:	2301      	movs	r3, #1
 8002684:	e016      	b.n	80026b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 fab8 	bl	8002c04 <DMA_CalcBaseAndBitshift>
 8002694:	4603      	mov	r3, r0
 8002696:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269c:	223f      	movs	r2, #63	@ 0x3f
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	f010803f 	.word	0xf010803f

080026c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ce:	2300      	movs	r3, #0
 80026d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Start_IT+0x26>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e040      	b.n	8002768 <HAL_DMA_Start_IT+0xa8>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d12f      	bne.n	800275a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2202      	movs	r2, #2
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fa4a 	bl	8002ba8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002718:	223f      	movs	r2, #63	@ 0x3f
 800271a:	409a      	lsls	r2, r3
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f042 0216 	orr.w	r2, r2, #22
 800272e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0208 	orr.w	r2, r2, #8
 8002746:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	e005      	b.n	8002766 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002766:	7dfb      	ldrb	r3, [r7, #23]
}
 8002768:	4618      	mov	r0, r3
 800276a:	3718      	adds	r7, #24
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800277e:	f7ff fdd3 	bl	8002328 <HAL_GetTick>
 8002782:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d008      	beq.n	80027a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2280      	movs	r2, #128	@ 0x80
 8002794:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e052      	b.n	8002848 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0216 	bic.w	r2, r2, #22
 80027b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695a      	ldr	r2, [r3, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d103      	bne.n	80027d2 <HAL_DMA_Abort+0x62>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d007      	beq.n	80027e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f022 0208 	bic.w	r2, r2, #8
 80027e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f2:	e013      	b.n	800281c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f4:	f7ff fd98 	bl	8002328 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b05      	cmp	r3, #5
 8002800:	d90c      	bls.n	800281c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2203      	movs	r2, #3
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e015      	b.n	8002848 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1e4      	bne.n	80027f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282e:	223f      	movs	r2, #63	@ 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d004      	beq.n	800286e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2280      	movs	r2, #128	@ 0x80
 8002868:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e00c      	b.n	8002888 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028a0:	4b8e      	ldr	r3, [pc, #568]	@ (8002adc <HAL_DMA_IRQHandler+0x248>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a8e      	ldr	r2, [pc, #568]	@ (8002ae0 <HAL_DMA_IRQHandler+0x24c>)
 80028a6:	fba2 2303 	umull	r2, r3, r2, r3
 80028aa:	0a9b      	lsrs	r3, r3, #10
 80028ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028be:	2208      	movs	r2, #8
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d01a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0204 	bic.w	r2, r2, #4
 80028e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028ec:	2208      	movs	r2, #8
 80028ee:	409a      	lsls	r2, r3
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f8:	f043 0201 	orr.w	r2, r3, #1
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002904:	2201      	movs	r2, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4013      	ands	r3, r2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d012      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	2204      	movs	r2, #4
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d012      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00b      	beq.n	800296c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002958:	2204      	movs	r2, #4
 800295a:	409a      	lsls	r2, r3
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002970:	2210      	movs	r2, #16
 8002972:	409a      	lsls	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d043      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d03c      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	2210      	movs	r2, #16
 8002990:	409a      	lsls	r2, r3
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d018      	beq.n	80029d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d108      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d024      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
 80029c2:	e01f      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d01b      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
 80029d4:	e016      	b.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d107      	bne.n	80029f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0208 	bic.w	r2, r2, #8
 80029f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a08:	2220      	movs	r2, #32
 8002a0a:	409a      	lsls	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 808f 	beq.w	8002b34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0310 	and.w	r3, r3, #16
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	f000 8087 	beq.w	8002b34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d136      	bne.n	8002aac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0216 	bic.w	r2, r2, #22
 8002a4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	695a      	ldr	r2, [r3, #20]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <HAL_DMA_IRQHandler+0x1da>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d007      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f022 0208 	bic.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a82:	223f      	movs	r2, #63	@ 0x3f
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d07e      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	4798      	blx	r3
        }
        return;
 8002aaa:	e079      	b.n	8002ba0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d01d      	beq.n	8002af6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10d      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d031      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	4798      	blx	r3
 8002ad8:	e02c      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
 8002ada:	bf00      	nop
 8002adc:	2000002c 	.word	0x2000002c
 8002ae0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d023      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	4798      	blx	r3
 8002af4:	e01e      	b.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10f      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 0210 	bic.w	r2, r2, #16
 8002b12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d032      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2205      	movs	r2, #5
 8002b4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0201 	bic.w	r2, r2, #1
 8002b5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	3301      	adds	r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d307      	bcc.n	8002b7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0301 	and.w	r3, r3, #1
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f2      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x2cc>
 8002b7a:	e000      	b.n	8002b7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
 8002b9e:	e000      	b.n	8002ba2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ba0:	bf00      	nop
    }
  }
}
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	607a      	str	r2, [r7, #4]
 8002bb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b40      	cmp	r3, #64	@ 0x40
 8002bd4:	d108      	bne.n	8002be8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002be6:	e007      	b.n	8002bf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68ba      	ldr	r2, [r7, #8]
 8002bee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	60da      	str	r2, [r3, #12]
}
 8002bf8:	bf00      	nop
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	3b10      	subs	r3, #16
 8002c14:	4a14      	ldr	r2, [pc, #80]	@ (8002c68 <DMA_CalcBaseAndBitshift+0x64>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1e:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <DMA_CalcBaseAndBitshift+0x68>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d909      	bls.n	8002c46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c3a:	f023 0303 	bic.w	r3, r3, #3
 8002c3e:	1d1a      	adds	r2, r3, #4
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c44:	e007      	b.n	8002c56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c4e:	f023 0303 	bic.w	r3, r3, #3
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	aaaaaaab 	.word	0xaaaaaaab
 8002c6c:	080063f8 	.word	0x080063f8

08002c70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d856      	bhi.n	8002d3e <DMA_CheckFifoParam+0xce>
 8002c90:	a201      	add	r2, pc, #4	@ (adr r2, 8002c98 <DMA_CheckFifoParam+0x28>)
 8002c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c96:	bf00      	nop
 8002c98:	08002ca9 	.word	0x08002ca9
 8002c9c:	08002cbb 	.word	0x08002cbb
 8002ca0:	08002ca9 	.word	0x08002ca9
 8002ca4:	08002d3f 	.word	0x08002d3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d046      	beq.n	8002d42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb8:	e043      	b.n	8002d42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002cc2:	d140      	bne.n	8002d46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc8:	e03d      	b.n	8002d46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd2:	d121      	bne.n	8002d18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d837      	bhi.n	8002d4a <DMA_CheckFifoParam+0xda>
 8002cda:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <DMA_CheckFifoParam+0x70>)
 8002cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce0:	08002cf1 	.word	0x08002cf1
 8002ce4:	08002cf7 	.word	0x08002cf7
 8002ce8:	08002cf1 	.word	0x08002cf1
 8002cec:	08002d09 	.word	0x08002d09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf4:	e030      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d025      	beq.n	8002d4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d06:	e022      	b.n	8002d4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002d10:	d11f      	bne.n	8002d52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d16:	e01c      	b.n	8002d52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d903      	bls.n	8002d26 <DMA_CheckFifoParam+0xb6>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d003      	beq.n	8002d2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d24:	e018      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2a:	e015      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3c:	e00b      	b.n	8002d56 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e00a      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e008      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e006      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e004      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e002      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d52:	bf00      	nop
 8002d54:	e000      	b.n	8002d58 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
    }
  } 
  
  return status; 
 8002d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e159      	b.n	8003038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8148 	bne.w	8003032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80a2 	beq.w	8003032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b57      	ldr	r3, [pc, #348]	@ (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	4a56      	ldr	r2, [pc, #344]	@ (8003050 <HAL_GPIO_Init+0x2e8>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002efe:	4b54      	ldr	r3, [pc, #336]	@ (8003050 <HAL_GPIO_Init+0x2e8>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a52      	ldr	r2, [pc, #328]	@ (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a49      	ldr	r2, [pc, #292]	@ (8003058 <HAL_GPIO_Init+0x2f0>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d019      	beq.n	8002f6a <HAL_GPIO_Init+0x202>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a48      	ldr	r2, [pc, #288]	@ (800305c <HAL_GPIO_Init+0x2f4>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d013      	beq.n	8002f66 <HAL_GPIO_Init+0x1fe>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a47      	ldr	r2, [pc, #284]	@ (8003060 <HAL_GPIO_Init+0x2f8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00d      	beq.n	8002f62 <HAL_GPIO_Init+0x1fa>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a46      	ldr	r2, [pc, #280]	@ (8003064 <HAL_GPIO_Init+0x2fc>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <HAL_GPIO_Init+0x1f6>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a45      	ldr	r2, [pc, #276]	@ (8003068 <HAL_GPIO_Init+0x300>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d101      	bne.n	8002f5a <HAL_GPIO_Init+0x1f2>
 8002f56:	2304      	movs	r3, #4
 8002f58:	e008      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5a:	2307      	movs	r3, #7
 8002f5c:	e006      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e004      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e002      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <HAL_GPIO_Init+0x204>
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f002 0203 	and.w	r2, r2, #3
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	4093      	lsls	r3, r2
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f7c:	4935      	ldr	r1, [pc, #212]	@ (8003054 <HAL_GPIO_Init+0x2ec>)
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	089b      	lsrs	r3, r3, #2
 8002f82:	3302      	adds	r3, #2
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b38      	ldr	r3, [pc, #224]	@ (800306c <HAL_GPIO_Init+0x304>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a2f      	ldr	r2, [pc, #188]	@ (800306c <HAL_GPIO_Init+0x304>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800306c <HAL_GPIO_Init+0x304>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a24      	ldr	r2, [pc, #144]	@ (800306c <HAL_GPIO_Init+0x304>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fde:	4b23      	ldr	r3, [pc, #140]	@ (800306c <HAL_GPIO_Init+0x304>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	4013      	ands	r3, r2
 8002fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003002:	4a1a      	ldr	r2, [pc, #104]	@ (800306c <HAL_GPIO_Init+0x304>)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003008:	4b18      	ldr	r3, [pc, #96]	@ (800306c <HAL_GPIO_Init+0x304>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800302c:	4a0f      	ldr	r2, [pc, #60]	@ (800306c <HAL_GPIO_Init+0x304>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	3301      	adds	r3, #1
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	2b0f      	cmp	r3, #15
 800303c:	f67f aea2 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3724      	adds	r7, #36	@ 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40023800 	.word	0x40023800
 8003054:	40013800 	.word	0x40013800
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400
 8003060:	40020800 	.word	0x40020800
 8003064:	40020c00 	.word	0x40020c00
 8003068:	40021000 	.word	0x40021000
 800306c:	40013c00 	.word	0x40013c00

08003070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	807b      	strh	r3, [r7, #2]
 800307c:	4613      	mov	r3, r2
 800307e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003080:	787b      	ldrb	r3, [r7, #1]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800308c:	e003      	b.n	8003096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800308e:	887b      	ldrh	r3, [r7, #2]
 8003090:	041a      	lsls	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	619a      	str	r2, [r3, #24]
}
 8003096:	bf00      	nop
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e267      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	4b88      	ldr	r3, [pc, #544]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff f8e4 	bl	8002328 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff f8e0 	bl	8002328 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e207      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f8d0 	bl	8002328 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f8cc 	bl	8002328 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1f3      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7ff f885 	bl	8002328 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7ff f881 	bl	8002328 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a8      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7ff f864 	bl	8002328 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7ff f860 	bl	8002328 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e187      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7ff f844 	bl	8002328 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7ff f840 	bl	8002328 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e167      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7ff f82d 	bl	8002328 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7ff f829 	bl	8002328 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e150      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	@ 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe ffe9 	bl	8002328 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe ffe5 	bl	8002328 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	@ 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe ffaa 	bl	8002328 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe ffa6 	bl	8002328 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0cb      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe ff94 	bl	8002328 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe ff90 	bl	8002328 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b5      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe ff64 	bl	8002328 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe ff60 	bl	8002328 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e087      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe ff39 	bl	8002328 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe ff35 	bl	8002328 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e054      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe ff22 	bl	8002328 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe ff1e 	bl	8002328 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_RCC_OscConfig+0x4ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d028      	beq.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe fe50 	bl	8002328 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe fe4c 	bl	8002328 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fdb0 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	080063e0 	.word	0x080063e0
 8003758:	2000002c 	.word	0x2000002c
 800375c:	20000030 	.word	0x20000030

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b090      	sub	sp, #64	@ 0x40
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	637b      	str	r3, [r7, #52]	@ 0x34
 800376c:	2300      	movs	r3, #0
 800376e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003770:	2300      	movs	r3, #0
 8003772:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b59      	ldr	r3, [pc, #356]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80a1 	bhi.w	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e09b      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b53      	ldr	r3, [pc, #332]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003796:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003798:	e09b      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b53      	ldr	r3, [pc, #332]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800379c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800379e:	e098      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b4f      	ldr	r3, [pc, #316]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b4d      	ldr	r3, [pc, #308]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c8:	2100      	movs	r1, #0
 80037ca:	4b47      	ldr	r3, [pc, #284]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037cc:	fb03 f201 	mul.w	r2, r3, r1
 80037d0:	2300      	movs	r3, #0
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	4a43      	ldr	r2, [pc, #268]	@ (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037da:	fba0 1202 	umull	r1, r2, r0, r2
 80037de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e0:	460a      	mov	r2, r1
 80037e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80037e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037e6:	4413      	add	r3, r2
 80037e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ec:	2200      	movs	r2, #0
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80037fa:	f7fd f8a7 	bl	800094c <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4613      	mov	r3, r2
 8003804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003806:	e053      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4b35      	ldr	r3, [pc, #212]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	2200      	movs	r2, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	617a      	str	r2, [r7, #20]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800381a:	f04f 0b00 	mov.w	fp, #0
 800381e:	4652      	mov	r2, sl
 8003820:	465b      	mov	r3, fp
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003830:	0150      	lsls	r0, r2, #5
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	ebb2 080a 	subs.w	r8, r2, sl
 800383a:	eb63 090b 	sbc.w	r9, r3, fp
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800384a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003852:	ebb2 0408 	subs.w	r4, r2, r8
 8003856:	eb63 0509 	sbc.w	r5, r3, r9
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	00eb      	lsls	r3, r5, #3
 8003864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003868:	00e2      	lsls	r2, r4, #3
 800386a:	4614      	mov	r4, r2
 800386c:	461d      	mov	r5, r3
 800386e:	eb14 030a 	adds.w	r3, r4, sl
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	eb45 030b 	adc.w	r3, r5, fp
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003886:	4629      	mov	r1, r5
 8003888:	028b      	lsls	r3, r1, #10
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003890:	4621      	mov	r1, r4
 8003892:	028a      	lsls	r2, r1, #10
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800389a:	2200      	movs	r2, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a4:	f7fd f852 	bl	800094c <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80038c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038ca:	e002      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038cc:	4b05      	ldr	r3, [pc, #20]	@ (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80038d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3740      	adds	r7, #64	@ 0x40
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	017d7840 	.word	0x017d7840

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	@ (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	2000002c 	.word	0x2000002c

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b05      	ldr	r3, [pc, #20]	@ (8003924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a9b      	lsrs	r3, r3, #10
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4903      	ldr	r1, [pc, #12]	@ (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003920:	4618      	mov	r0, r3
 8003922:	bd80      	pop	{r7, pc}
 8003924:	40023800 	.word	0x40023800
 8003928:	080063f0 	.word	0x080063f0

0800392c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003930:	f7ff ffdc 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003934:	4602      	mov	r2, r0
 8003936:	4b05      	ldr	r3, [pc, #20]	@ (800394c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	0b5b      	lsrs	r3, r3, #13
 800393c:	f003 0307 	and.w	r3, r3, #7
 8003940:	4903      	ldr	r1, [pc, #12]	@ (8003950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003942:	5ccb      	ldrb	r3, [r1, r3]
 8003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003948:	4618      	mov	r0, r3
 800394a:	bd80      	pop	{r7, pc}
 800394c:	40023800 	.word	0x40023800
 8003950:	080063f0 	.word	0x080063f0

08003954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e041      	b.n	80039ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7fe fa28 	bl	8001dd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f000 fbf4 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}

080039f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f2:	b580      	push	{r7, lr}
 80039f4:	b082      	sub	sp, #8
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d101      	bne.n	8003a04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e041      	b.n	8003a88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d106      	bne.n	8003a1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f839 	bl	8003a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2202      	movs	r2, #2
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f000 fba5 	bl	8004180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d109      	bne.n	8003ac8 <HAL_TIM_PWM_Start+0x24>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	bf14      	ite	ne
 8003ac0:	2301      	movne	r3, #1
 8003ac2:	2300      	moveq	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e022      	b.n	8003b0e <HAL_TIM_PWM_Start+0x6a>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d109      	bne.n	8003ae2 <HAL_TIM_PWM_Start+0x3e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	bf14      	ite	ne
 8003ada:	2301      	movne	r3, #1
 8003adc:	2300      	moveq	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	e015      	b.n	8003b0e <HAL_TIM_PWM_Start+0x6a>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d109      	bne.n	8003afc <HAL_TIM_PWM_Start+0x58>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	e008      	b.n	8003b0e <HAL_TIM_PWM_Start+0x6a>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e068      	b.n	8003be8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d104      	bne.n	8003b26 <HAL_TIM_PWM_Start+0x82>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b24:	e013      	b.n	8003b4e <HAL_TIM_PWM_Start+0xaa>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d104      	bne.n	8003b36 <HAL_TIM_PWM_Start+0x92>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b34:	e00b      	b.n	8003b4e <HAL_TIM_PWM_Start+0xaa>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d104      	bne.n	8003b46 <HAL_TIM_PWM_Start+0xa2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b44:	e003      	b.n	8003b4e <HAL_TIM_PWM_Start+0xaa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2201      	movs	r2, #1
 8003b54:	6839      	ldr	r1, [r7, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fdc4 	bl	80046e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a23      	ldr	r2, [pc, #140]	@ (8003bf0 <HAL_TIM_PWM_Start+0x14c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d107      	bne.n	8003b76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b74:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf0 <HAL_TIM_PWM_Start+0x14c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x10e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b88:	d013      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x10e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a19      	ldr	r2, [pc, #100]	@ (8003bf4 <HAL_TIM_PWM_Start+0x150>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x10e>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <HAL_TIM_PWM_Start+0x154>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x10e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a16      	ldr	r2, [pc, #88]	@ (8003bfc <HAL_TIM_PWM_Start+0x158>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0x10e>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a14      	ldr	r2, [pc, #80]	@ (8003c00 <HAL_TIM_PWM_Start+0x15c>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d111      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d010      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	e007      	b.n	8003be6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40014000 	.word	0x40014000

08003c04 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e097      	b.n	8003d48 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d106      	bne.n	8003c32 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7fe f907 	bl	8001e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c48:	f023 0307 	bic.w	r3, r3, #7
 8003c4c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	4619      	mov	r1, r3
 8003c58:	4610      	mov	r0, r2
 8003c5a:	f000 fa91 	bl	8004180 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	697a      	ldr	r2, [r7, #20]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	4313      	orrs	r3, r2
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003ca4:	f023 030c 	bic.w	r3, r3, #12
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003cb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003cb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	011a      	lsls	r2, r3, #4
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	031b      	lsls	r3, r3, #12
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ce2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003cea:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d60:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d68:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d70:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d78:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d110      	bne.n	8003da2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d86:	7b7b      	ldrb	r3, [r7, #13]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e069      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2202      	movs	r2, #2
 8003d9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003da0:	e031      	b.n	8003e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d110      	bne.n	8003dca <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003da8:	7bbb      	ldrb	r3, [r7, #14]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dae:	7b3b      	ldrb	r3, [r7, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e055      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2202      	movs	r2, #2
 8003dc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003dc8:	e01d      	b.n	8003e06 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d108      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd0:	7bbb      	ldrb	r3, [r7, #14]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d105      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003dd6:	7b7b      	ldrb	r3, [r7, #13]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d102      	bne.n	8003de2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ddc:	7b3b      	ldrb	r3, [r7, #12]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d001      	beq.n	8003de6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03e      	b.n	8003e64 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2202      	movs	r2, #2
 8003df2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2202      	movs	r2, #2
 8003dfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_TIM_Encoder_Start+0xc4>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d008      	beq.n	8003e24 <HAL_TIM_Encoder_Start+0xd4>
 8003e12:	e00f      	b.n	8003e34 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fc61 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003e22:	e016      	b.n	8003e52 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fc59 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003e32:	e00e      	b.n	8003e52 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 fc51 	bl	80046e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2201      	movs	r2, #1
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc4a 	bl	80046e4 <TIM_CCxChannelCmd>
      break;
 8003e50:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0201 	orr.w	r2, r2, #1
 8003e60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b086      	sub	sp, #24
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d101      	bne.n	8003e8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e0ae      	b.n	8003fe8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b0c      	cmp	r3, #12
 8003e96:	f200 809f 	bhi.w	8003fd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003ed5 	.word	0x08003ed5
 8003ea4:	08003fd9 	.word	0x08003fd9
 8003ea8:	08003fd9 	.word	0x08003fd9
 8003eac:	08003fd9 	.word	0x08003fd9
 8003eb0:	08003f15 	.word	0x08003f15
 8003eb4:	08003fd9 	.word	0x08003fd9
 8003eb8:	08003fd9 	.word	0x08003fd9
 8003ebc:	08003fd9 	.word	0x08003fd9
 8003ec0:	08003f57 	.word	0x08003f57
 8003ec4:	08003fd9 	.word	0x08003fd9
 8003ec8:	08003fd9 	.word	0x08003fd9
 8003ecc:	08003fd9 	.word	0x08003fd9
 8003ed0:	08003f97 	.word	0x08003f97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 f9dc 	bl	8004298 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0204 	bic.w	r2, r2, #4
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	619a      	str	r2, [r3, #24]
      break;
 8003f12:	e064      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fa22 	bl	8004364 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699a      	ldr	r2, [r3, #24]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699a      	ldr	r2, [r3, #24]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6999      	ldr	r1, [r3, #24]
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	021a      	lsls	r2, r3, #8
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	619a      	str	r2, [r3, #24]
      break;
 8003f54:	e043      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fa6d 	bl	800443c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0208 	orr.w	r2, r2, #8
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0204 	bic.w	r2, r2, #4
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
      break;
 8003f94:	e023      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fab7 	bl	8004510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69da      	ldr	r2, [r3, #28]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69d9      	ldr	r1, [r3, #28]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	021a      	lsls	r2, r3, #8
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	61da      	str	r2, [r3, #28]
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	75fb      	strb	r3, [r7, #23]
      break;
 8003fdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_TIM_ConfigClockSource+0x1c>
 8004008:	2302      	movs	r3, #2
 800400a:	e0b4      	b.n	8004176 <HAL_TIM_ConfigClockSource+0x186>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800402a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004044:	d03e      	beq.n	80040c4 <HAL_TIM_ConfigClockSource+0xd4>
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800404a:	f200 8087 	bhi.w	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800404e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004052:	f000 8086 	beq.w	8004162 <HAL_TIM_ConfigClockSource+0x172>
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800405a:	d87f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800405c:	2b70      	cmp	r3, #112	@ 0x70
 800405e:	d01a      	beq.n	8004096 <HAL_TIM_ConfigClockSource+0xa6>
 8004060:	2b70      	cmp	r3, #112	@ 0x70
 8004062:	d87b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004064:	2b60      	cmp	r3, #96	@ 0x60
 8004066:	d050      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x11a>
 8004068:	2b60      	cmp	r3, #96	@ 0x60
 800406a:	d877      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800406c:	2b50      	cmp	r3, #80	@ 0x50
 800406e:	d03c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xfa>
 8004070:	2b50      	cmp	r3, #80	@ 0x50
 8004072:	d873      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004074:	2b40      	cmp	r3, #64	@ 0x40
 8004076:	d058      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x13a>
 8004078:	2b40      	cmp	r3, #64	@ 0x40
 800407a:	d86f      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800407c:	2b30      	cmp	r3, #48	@ 0x30
 800407e:	d064      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004080:	2b30      	cmp	r3, #48	@ 0x30
 8004082:	d86b      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 8004084:	2b20      	cmp	r3, #32
 8004086:	d060      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d867      	bhi.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
 800408c:	2b00      	cmp	r3, #0
 800408e:	d05c      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004090:	2b10      	cmp	r3, #16
 8004092:	d05a      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	e062      	b.n	800415c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040a6:	f000 fafd 	bl	80046a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	609a      	str	r2, [r3, #8]
      break;
 80040c2:	e04f      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040d4:	f000 fae6 	bl	80046a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040e6:	609a      	str	r2, [r3, #8]
      break;
 80040e8:	e03c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fa5a 	bl	80045b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2150      	movs	r1, #80	@ 0x50
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fab3 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8004108:	e02c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004116:	461a      	mov	r2, r3
 8004118:	f000 fa79 	bl	800460e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2160      	movs	r1, #96	@ 0x60
 8004122:	4618      	mov	r0, r3
 8004124:	f000 faa3 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8004128:	e01c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004136:	461a      	mov	r2, r3
 8004138:	f000 fa3a 	bl	80045b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2140      	movs	r1, #64	@ 0x40
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fa93 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 8004148:	e00c      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4619      	mov	r1, r3
 8004154:	4610      	mov	r0, r2
 8004156:	f000 fa8a 	bl	800466e <TIM_ITRx_SetConfig>
      break;
 800415a:	e003      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e000      	b.n	8004164 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004174:	7bfb      	ldrb	r3, [r7, #15]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4a3a      	ldr	r2, [pc, #232]	@ (800427c <TIM_Base_SetConfig+0xfc>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00f      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800419e:	d00b      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a37      	ldr	r2, [pc, #220]	@ (8004280 <TIM_Base_SetConfig+0x100>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d007      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a36      	ldr	r2, [pc, #216]	@ (8004284 <TIM_Base_SetConfig+0x104>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d003      	beq.n	80041b8 <TIM_Base_SetConfig+0x38>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a35      	ldr	r2, [pc, #212]	@ (8004288 <TIM_Base_SetConfig+0x108>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d108      	bne.n	80041ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a2b      	ldr	r2, [pc, #172]	@ (800427c <TIM_Base_SetConfig+0xfc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d01b      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d8:	d017      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a28      	ldr	r2, [pc, #160]	@ (8004280 <TIM_Base_SetConfig+0x100>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d013      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a27      	ldr	r2, [pc, #156]	@ (8004284 <TIM_Base_SetConfig+0x104>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00f      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a26      	ldr	r2, [pc, #152]	@ (8004288 <TIM_Base_SetConfig+0x108>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00b      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a25      	ldr	r2, [pc, #148]	@ (800428c <TIM_Base_SetConfig+0x10c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a24      	ldr	r2, [pc, #144]	@ (8004290 <TIM_Base_SetConfig+0x110>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d003      	beq.n	800420a <TIM_Base_SetConfig+0x8a>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <TIM_Base_SetConfig+0x114>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a0e      	ldr	r2, [pc, #56]	@ (800427c <TIM_Base_SetConfig+0xfc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d103      	bne.n	8004250 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	691a      	ldr	r2, [r3, #16]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d105      	bne.n	800426e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	f023 0201 	bic.w	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	611a      	str	r2, [r3, #16]
  }
}
 800426e:	bf00      	nop
 8004270:	3714      	adds	r7, #20
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
 800427a:	bf00      	nop
 800427c:	40010000 	.word	0x40010000
 8004280:	40000400 	.word	0x40000400
 8004284:	40000800 	.word	0x40000800
 8004288:	40000c00 	.word	0x40000c00
 800428c:	40014000 	.word	0x40014000
 8004290:	40014400 	.word	0x40014400
 8004294:	40014800 	.word	0x40014800

08004298 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a1b      	ldr	r3, [r3, #32]
 80042ac:	f023 0201 	bic.w	r2, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	699b      	ldr	r3, [r3, #24]
 80042be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f023 0303 	bic.w	r3, r3, #3
 80042ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f023 0302 	bic.w	r3, r3, #2
 80042e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a1c      	ldr	r2, [pc, #112]	@ (8004360 <TIM_OC1_SetConfig+0xc8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d10c      	bne.n	800430e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f023 0308 	bic.w	r3, r3, #8
 80042fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	f023 0304 	bic.w	r3, r3, #4
 800430c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <TIM_OC1_SetConfig+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d111      	bne.n	800433a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800431c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	4313      	orrs	r3, r2
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	621a      	str	r2, [r3, #32]
}
 8004354:	bf00      	nop
 8004356:	371c      	adds	r7, #28
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40010000 	.word	0x40010000

08004364 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004364:	b480      	push	{r7}
 8004366:	b087      	sub	sp, #28
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	f023 0210 	bic.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800439a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	021b      	lsls	r3, r3, #8
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0320 	bic.w	r3, r3, #32
 80043ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <TIM_OC2_SetConfig+0xd4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d10d      	bne.n	80043e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <TIM_OC2_SetConfig+0xd4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d113      	bne.n	8004410 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	4313      	orrs	r3, r2
 800440e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	621a      	str	r2, [r3, #32]
}
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40010000 	.word	0x40010000

0800443c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a1b      	ldr	r3, [r3, #32]
 8004450:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	021b      	lsls	r3, r3, #8
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a1d      	ldr	r2, [pc, #116]	@ (800450c <TIM_OC3_SetConfig+0xd0>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d10d      	bne.n	80044b6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80044b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a14      	ldr	r2, [pc, #80]	@ (800450c <TIM_OC3_SetConfig+0xd0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d113      	bne.n	80044e6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80044c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	011b      	lsls	r3, r3, #4
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	621a      	str	r2, [r3, #32]
}
 8004500:	bf00      	nop
 8004502:	371c      	adds	r7, #28
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	40010000 	.word	0x40010000

08004510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004510:	b480      	push	{r7}
 8004512:	b087      	sub	sp, #28
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800453e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	4313      	orrs	r3, r2
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800455a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	031b      	lsls	r3, r3, #12
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a10      	ldr	r2, [pc, #64]	@ (80045ac <TIM_OC4_SetConfig+0x9c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d109      	bne.n	8004584 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	019b      	lsls	r3, r3, #6
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000

080045b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1b      	ldr	r3, [r3, #32]
 80045c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a1b      	ldr	r3, [r3, #32]
 80045c6:	f023 0201 	bic.w	r2, r3, #1
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f023 030a 	bic.w	r3, r3, #10
 80045ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	621a      	str	r2, [r3, #32]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800460e:	b480      	push	{r7}
 8004610:	b087      	sub	sp, #28
 8004612:	af00      	add	r7, sp, #0
 8004614:	60f8      	str	r0, [r7, #12]
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 0210 	bic.w	r2, r3, #16
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	031b      	lsls	r3, r3, #12
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800464a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800466e:	b480      	push	{r7}
 8004670:	b085      	sub	sp, #20
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
 8004676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	f043 0307 	orr.w	r3, r3, #7
 8004690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	609a      	str	r2, [r3, #8]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80046be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	021a      	lsls	r2, r3, #8
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	609a      	str	r2, [r3, #8]
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b087      	sub	sp, #28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f003 031f 	and.w	r3, r3, #31
 80046f6:	2201      	movs	r2, #1
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	43db      	mvns	r3, r3
 8004706:	401a      	ands	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a1a      	ldr	r2, [r3, #32]
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	431a      	orrs	r2, r3
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	621a      	str	r2, [r3, #32]
}
 8004722:	bf00      	nop
 8004724:	371c      	adds	r7, #28
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
	...

08004730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004740:	2b01      	cmp	r3, #1
 8004742:	d101      	bne.n	8004748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004744:	2302      	movs	r3, #2
 8004746:	e050      	b.n	80047ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800476e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d018      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d013      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a18      	ldr	r2, [pc, #96]	@ (80047fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d00e      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a16      	ldr	r2, [pc, #88]	@ (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a15      	ldr	r2, [pc, #84]	@ (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a13      	ldr	r2, [pc, #76]	@ (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d10c      	bne.n	80047d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68ba      	ldr	r2, [r7, #8]
 80047d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40010000 	.word	0x40010000
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40014000 	.word	0x40014000

0800480c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e042      	b.n	80048a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fd fbd8 	bl	8001fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	@ 0x24
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800484e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 fe97 	bl	8005584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	691a      	ldr	r2, [r3, #16]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68da      	ldr	r2, [r3, #12]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d121      	bne.n	800490a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Transmit_IT+0x26>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e01a      	b.n	800490c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	88fa      	ldrh	r2, [r7, #6]
 80048e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	88fa      	ldrh	r2, [r7, #6]
 80048e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2221      	movs	r2, #33	@ 0x21
 80048f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68da      	ldr	r2, [r3, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004904:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004906:	2300      	movs	r3, #0
 8004908:	e000      	b.n	800490c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800490a:	2302      	movs	r3, #2
  }
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	4613      	mov	r3, r2
 8004924:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	d112      	bne.n	8004958 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Receive_DMA+0x26>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e00b      	b.n	800495a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004948:	88fb      	ldrh	r3, [r7, #6]
 800494a:	461a      	mov	r2, r3
 800494c:	68b9      	ldr	r1, [r7, #8]
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 fbb8 	bl	80050c4 <UART_Start_Receive_DMA>
 8004954:	4603      	mov	r3, r0
 8004956:	e000      	b.n	800495a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
	...

08004964 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b0ba      	sub	sp, #232	@ 0xe8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800498a:	2300      	movs	r3, #0
 800498c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004990:	2300      	movs	r3, #0
 8004992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499a:	f003 030f 	and.w	r3, r3, #15
 800499e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80049a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10f      	bne.n	80049ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80049aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_UART_IRQHandler+0x66>
 80049b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fd1f 	bl	8005406 <UART_Receive_IT>
      return;
 80049c8:	e25b      	b.n	8004e82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80049ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	f000 80de 	beq.w	8004b90 <HAL_UART_IRQHandler+0x22c>
 80049d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d106      	bne.n	80049ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80d1 	beq.w	8004b90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <HAL_UART_IRQHandler+0xae>
 80049fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_UART_IRQHandler+0xd2>
 8004a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a22:	f003 0301 	and.w	r3, r3, #1
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2e:	f043 0202 	orr.w	r2, r3, #2
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <HAL_UART_IRQHandler+0xf6>
 8004a42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	f043 0204 	orr.w	r2, r3, #4
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d011      	beq.n	8004a8a <HAL_UART_IRQHandler+0x126>
 8004a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d105      	bne.n	8004a7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d005      	beq.n	8004a8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a82:	f043 0208 	orr.w	r2, r3, #8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f000 81f2 	beq.w	8004e78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a98:	f003 0320 	and.w	r3, r3, #32
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d008      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x14e>
 8004aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aa4:	f003 0320 	and.w	r3, r3, #32
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fcaa 	bl	8005406 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004abc:	2b40      	cmp	r3, #64	@ 0x40
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d103      	bne.n	8004ade <HAL_UART_IRQHandler+0x17a>
 8004ad6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d04f      	beq.n	8004b7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fbb2 	bl	8005248 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aee:	2b40      	cmp	r3, #64	@ 0x40
 8004af0:	d141      	bne.n	8004b76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3314      	adds	r3, #20
 8004af8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	3314      	adds	r3, #20
 8004b1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1d9      	bne.n	8004af2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d013      	beq.n	8004b6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004d44 <HAL_UART_IRQHandler+0x3e0>)
 8004b4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fd fe7c 	bl	8002850 <HAL_DMA_Abort_IT>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d016      	beq.n	8004b8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b6c:	e00e      	b.n	8004b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f994 	bl	8004e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	e00a      	b.n	8004b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f990 	bl	8004e9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b7c:	e006      	b.n	8004b8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f98c 	bl	8004e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b8a:	e175      	b.n	8004e78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b8c:	bf00      	nop
    return;
 8004b8e:	e173      	b.n	8004e78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	f040 814f 	bne.w	8004e38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b9e:	f003 0310 	and.w	r3, r3, #16
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8148 	beq.w	8004e38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bac:	f003 0310 	and.w	r3, r3, #16
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f000 8141 	beq.w	8004e38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	60bb      	str	r3, [r7, #8]
 8004bca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	f040 80b6 	bne.w	8004d48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004be8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8145 	beq.w	8004e7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	f080 813e 	bcs.w	8004e7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c12:	f000 8088 	beq.w	8004d26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	330c      	adds	r3, #12
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004c24:	e853 3f00 	ldrex	r3, [r3]
 8004c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004c30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004c42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004c4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1d9      	bne.n	8004c16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	3314      	adds	r3, #20
 8004c68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c6c:	e853 3f00 	ldrex	r3, [r3]
 8004c70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004c72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3314      	adds	r3, #20
 8004c82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e1      	bne.n	8004c62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004cc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004cc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004cca:	e841 2300 	strex	r3, r2, [r1]
 8004cce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1e3      	bne.n	8004c9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004cf4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cf6:	f023 0310 	bic.w	r3, r3, #16
 8004cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	330c      	adds	r3, #12
 8004d04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004d08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004d0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d10:	e841 2300 	strex	r3, r2, [r1]
 8004d14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1e3      	bne.n	8004ce4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7fd fd25 	bl	8002770 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2202      	movs	r2, #2
 8004d2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f8b7 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d42:	e09b      	b.n	8004e7c <HAL_UART_IRQHandler+0x518>
 8004d44:	0800530f 	.word	0x0800530f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f000 808e 	beq.w	8004e80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004d64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8089 	beq.w	8004e80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	330c      	adds	r3, #12
 8004d8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e3      	bne.n	8004d6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3314      	adds	r3, #20
 8004dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	623b      	str	r3, [r7, #32]
   return(result);
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3314      	adds	r3, #20
 8004dc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004dca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1e3      	bne.n	8004da6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2220      	movs	r2, #32
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0310 	bic.w	r3, r3, #16
 8004e02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004e10:	61fa      	str	r2, [r7, #28]
 8004e12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	69b9      	ldr	r1, [r7, #24]
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e3      	bne.n	8004dec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e2e:	4619      	mov	r1, r3
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f83d 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e36:	e023      	b.n	8004e80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d009      	beq.n	8004e58 <HAL_UART_IRQHandler+0x4f4>
 8004e44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fa70 	bl	8005336 <UART_Transmit_IT>
    return;
 8004e56:	e014      	b.n	8004e82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d00e      	beq.n	8004e82 <HAL_UART_IRQHandler+0x51e>
 8004e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d008      	beq.n	8004e82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fab0 	bl	80053d6 <UART_EndTransmit_IT>
    return;
 8004e76:	e004      	b.n	8004e82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e78:	bf00      	nop
 8004e7a:	e002      	b.n	8004e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e80:	bf00      	nop
  }
}
 8004e82:	37e8      	adds	r7, #232	@ 0xe8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e90:	bf00      	nop
 8004e92:	370c      	adds	r7, #12
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr

08004e9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ea4:	bf00      	nop
 8004ea6:	370c      	adds	r7, #12
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	460b      	mov	r3, r1
 8004eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b09c      	sub	sp, #112	@ 0x70
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d172      	bne.n	8004fca <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	330c      	adds	r3, #12
 8004ef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004efa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004efc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004f0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f12:	e841 2300 	strex	r3, r2, [r1]
 8004f16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1e5      	bne.n	8004eea <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3314      	adds	r3, #20
 8004f24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f28:	e853 3f00 	ldrex	r3, [r3]
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f30:	f023 0301 	bic.w	r3, r3, #1
 8004f34:	667b      	str	r3, [r7, #100]	@ 0x64
 8004f36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004f3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f46:	e841 2300 	strex	r3, r2, [r1]
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1e5      	bne.n	8004f1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3314      	adds	r3, #20
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	623b      	str	r3, [r7, #32]
   return(result);
 8004f62:	6a3b      	ldr	r3, [r7, #32]
 8004f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f68:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3314      	adds	r3, #20
 8004f70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004f72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f7a:	e841 2300 	strex	r3, r2, [r1]
 8004f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1e5      	bne.n	8004f52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f88:	2220      	movs	r2, #32
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d119      	bne.n	8004fca <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f023 0310 	bic.w	r3, r3, #16
 8004fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	330c      	adds	r3, #12
 8004fb4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004fb6:	61fa      	str	r2, [r7, #28]
 8004fb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fba:	69b9      	ldr	r1, [r7, #24]
 8004fbc:	69fa      	ldr	r2, [r7, #28]
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d1e5      	bne.n	8004f96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fcc:	2200      	movs	r2, #0
 8004fce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d106      	bne.n	8004fe6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004fda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fdc:	4619      	mov	r1, r3
 8004fde:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fe0:	f7ff ff66 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004fe4:	e002      	b.n	8004fec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004fe6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004fe8:	f7fb fe28 	bl	8000c3c <HAL_UART_RxCpltCallback>
}
 8004fec:	bf00      	nop
 8004fee:	3770      	adds	r7, #112	@ 0x70
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}

08004ff4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005000:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2201      	movs	r2, #1
 8005006:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500c:	2b01      	cmp	r3, #1
 800500e:	d108      	bne.n	8005022 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	b29b      	uxth	r3, r3
 8005018:	4619      	mov	r1, r3
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff ff48 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005020:	e002      	b.n	8005028 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f7ff ff30 	bl	8004e88 <HAL_UART_RxHalfCpltCallback>
}
 8005028:	bf00      	nop
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}

08005030 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005040:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800504c:	2b80      	cmp	r3, #128	@ 0x80
 800504e:	bf0c      	ite	eq
 8005050:	2301      	moveq	r3, #1
 8005052:	2300      	movne	r3, #0
 8005054:	b2db      	uxtb	r3, r3
 8005056:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b21      	cmp	r3, #33	@ 0x21
 8005062:	d108      	bne.n	8005076 <UART_DMAError+0x46>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d005      	beq.n	8005076 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2200      	movs	r2, #0
 800506e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005070:	68b8      	ldr	r0, [r7, #8]
 8005072:	f000 f8c1 	bl	80051f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b22      	cmp	r3, #34	@ 0x22
 8005096:	d108      	bne.n	80050aa <UART_DMAError+0x7a>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80050a4:	68b8      	ldr	r0, [r7, #8]
 80050a6:	f000 f8cf 	bl	8005248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ae:	f043 0210 	orr.w	r2, r3, #16
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	f7ff fef0 	bl	8004e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050bc:	bf00      	nop
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b098      	sub	sp, #96	@ 0x60
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	4613      	mov	r3, r2
 80050d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	88fa      	ldrh	r2, [r7, #6]
 80050dc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2222      	movs	r2, #34	@ 0x22
 80050e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	4a3e      	ldr	r2, [pc, #248]	@ (80051ec <UART_Start_Receive_DMA+0x128>)
 80050f2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f8:	4a3d      	ldr	r2, [pc, #244]	@ (80051f0 <UART_Start_Receive_DMA+0x12c>)
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005100:	4a3c      	ldr	r2, [pc, #240]	@ (80051f4 <UART_Start_Receive_DMA+0x130>)
 8005102:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005108:	2200      	movs	r2, #0
 800510a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800510c:	f107 0308 	add.w	r3, r7, #8
 8005110:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	f7fd facc 	bl	80026c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	613b      	str	r3, [r7, #16]
 800513c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d019      	beq.n	800517a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	330c      	adds	r3, #12
 800514c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005150:	e853 3f00 	ldrex	r3, [r3]
 8005154:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005158:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800515c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	330c      	adds	r3, #12
 8005164:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005166:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005168:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800516c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800516e:	e841 2300 	strex	r3, r2, [r1]
 8005172:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e5      	bne.n	8005146 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3314      	adds	r3, #20
 8005180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005184:	e853 3f00 	ldrex	r3, [r3]
 8005188:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	f043 0301 	orr.w	r3, r3, #1
 8005190:	657b      	str	r3, [r7, #84]	@ 0x54
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	3314      	adds	r3, #20
 8005198:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800519a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80051a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e5      	bne.n	800517a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3314      	adds	r3, #20
 80051b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	617b      	str	r3, [r7, #20]
   return(result);
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	3314      	adds	r3, #20
 80051cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80051ce:	627a      	str	r2, [r7, #36]	@ 0x24
 80051d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d2:	6a39      	ldr	r1, [r7, #32]
 80051d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d6:	e841 2300 	strex	r3, r2, [r1]
 80051da:	61fb      	str	r3, [r7, #28]
   return(result);
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1e5      	bne.n	80051ae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3760      	adds	r7, #96	@ 0x60
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	08004ec9 	.word	0x08004ec9
 80051f0:	08004ff5 	.word	0x08004ff5
 80051f4:	08005031 	.word	0x08005031

080051f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b089      	sub	sp, #36	@ 0x24
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	330c      	adds	r3, #12
 8005206:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005216:	61fb      	str	r3, [r7, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	69fa      	ldr	r2, [r7, #28]
 8005220:	61ba      	str	r2, [r7, #24]
 8005222:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	6979      	ldr	r1, [r7, #20]
 8005226:	69ba      	ldr	r2, [r7, #24]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	613b      	str	r3, [r7, #16]
   return(result);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800523c:	bf00      	nop
 800523e:	3724      	adds	r7, #36	@ 0x24
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b095      	sub	sp, #84	@ 0x54
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525a:	e853 3f00 	ldrex	r3, [r3]
 800525e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	330c      	adds	r3, #12
 800526e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005270:	643a      	str	r2, [r7, #64]	@ 0x40
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005274:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005276:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005278:	e841 2300 	strex	r3, r2, [r1]
 800527c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800527e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1e5      	bne.n	8005250 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	61fb      	str	r3, [r7, #28]
   return(result);
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f023 0301 	bic.w	r3, r3, #1
 800529a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	3314      	adds	r3, #20
 80052a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80052a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80052b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e5      	bne.n	8005284 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d119      	bne.n	80052f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	330c      	adds	r3, #12
 80052c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	e853 3f00 	ldrex	r3, [r3]
 80052ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f023 0310 	bic.w	r3, r3, #16
 80052d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	330c      	adds	r3, #12
 80052de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80052e0:	61ba      	str	r2, [r7, #24]
 80052e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e4:	6979      	ldr	r1, [r7, #20]
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	e841 2300 	strex	r3, r2, [r1]
 80052ec:	613b      	str	r3, [r7, #16]
   return(result);
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1e5      	bne.n	80052c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2200      	movs	r2, #0
 8005300:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005302:	bf00      	nop
 8005304:	3754      	adds	r7, #84	@ 0x54
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800531a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff fdb7 	bl	8004e9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532e:	bf00      	nop
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b21      	cmp	r3, #33	@ 0x21
 8005348:	d13e      	bne.n	80053c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005352:	d114      	bne.n	800537e <UART_Transmit_IT+0x48>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d110      	bne.n	800537e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005370:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	1c9a      	adds	r2, r3, #2
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	621a      	str	r2, [r3, #32]
 800537c:	e008      	b.n	8005390 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6211      	str	r1, [r2, #32]
 8005388:	781a      	ldrb	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005394:	b29b      	uxth	r3, r3
 8005396:	3b01      	subs	r3, #1
 8005398:	b29b      	uxth	r3, r3
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4619      	mov	r1, r3
 800539e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68da      	ldr	r2, [r3, #12]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	e000      	b.n	80053ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053c8:	2302      	movs	r3, #2
  }
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3714      	adds	r7, #20
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68da      	ldr	r2, [r3, #12]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fb fc94 	bl	8000d24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b08c      	sub	sp, #48	@ 0x30
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b22      	cmp	r3, #34	@ 0x22
 8005418:	f040 80ae 	bne.w	8005578 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005424:	d117      	bne.n	8005456 <UART_Receive_IT+0x50>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d113      	bne.n	8005456 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005444:	b29a      	uxth	r2, r3
 8005446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005448:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	@ 0x28
 8005454:	e026      	b.n	80054a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800545c:	2300      	movs	r3, #0
 800545e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005468:	d007      	beq.n	800547a <UART_Receive_IT+0x74>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10a      	bne.n	8005488 <UART_Receive_IT+0x82>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	b2da      	uxtb	r2, r3
 8005482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e008      	b.n	800549a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005494:	b2da      	uxtb	r2, r3
 8005496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005498:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549e:	1c5a      	adds	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	4619      	mov	r1, r3
 80054b2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d15d      	bne.n	8005574 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f022 0220 	bic.w	r2, r2, #32
 80054c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	695a      	ldr	r2, [r3, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0201 	bic.w	r2, r2, #1
 80054e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2220      	movs	r2, #32
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d135      	bne.n	800556a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	330c      	adds	r3, #12
 800550a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	e853 3f00 	ldrex	r3, [r3]
 8005512:	613b      	str	r3, [r7, #16]
   return(result);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	f023 0310 	bic.w	r3, r3, #16
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	330c      	adds	r3, #12
 8005522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005524:	623a      	str	r2, [r7, #32]
 8005526:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	69f9      	ldr	r1, [r7, #28]
 800552a:	6a3a      	ldr	r2, [r7, #32]
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	61bb      	str	r3, [r7, #24]
   return(result);
 8005532:	69bb      	ldr	r3, [r7, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e5      	bne.n	8005504 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0310 	and.w	r3, r3, #16
 8005542:	2b10      	cmp	r3, #16
 8005544:	d10a      	bne.n	800555c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005546:	2300      	movs	r3, #0
 8005548:	60fb      	str	r3, [r7, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	60fb      	str	r3, [r7, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005560:	4619      	mov	r1, r3
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7ff fca4 	bl	8004eb0 <HAL_UARTEx_RxEventCallback>
 8005568:	e002      	b.n	8005570 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fb66 	bl	8000c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e002      	b.n	800557a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	e000      	b.n	800557a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005578:	2302      	movs	r3, #2
  }
}
 800557a:	4618      	mov	r0, r3
 800557c:	3730      	adds	r7, #48	@ 0x30
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005588:	b0c0      	sub	sp, #256	@ 0x100
 800558a:	af00      	add	r7, sp, #0
 800558c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800559c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a0:	68d9      	ldr	r1, [r3, #12]
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	ea40 0301 	orr.w	r3, r0, r1
 80055ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	431a      	orrs	r2, r3
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055dc:	f021 010c 	bic.w	r1, r1, #12
 80055e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055ea:	430b      	orrs	r3, r1
 80055ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	6999      	ldr	r1, [r3, #24]
 8005600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	ea40 0301 	orr.w	r3, r0, r1
 800560a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800560c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b8f      	ldr	r3, [pc, #572]	@ (8005850 <UART_SetConfig+0x2cc>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d005      	beq.n	8005624 <UART_SetConfig+0xa0>
 8005618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b8d      	ldr	r3, [pc, #564]	@ (8005854 <UART_SetConfig+0x2d0>)
 8005620:	429a      	cmp	r2, r3
 8005622:	d104      	bne.n	800562e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005624:	f7fe f982 	bl	800392c <HAL_RCC_GetPCLK2Freq>
 8005628:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800562c:	e003      	b.n	8005636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800562e:	f7fe f969 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005632:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005640:	f040 810c 	bne.w	800585c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005648:	2200      	movs	r2, #0
 800564a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800564e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005656:	4622      	mov	r2, r4
 8005658:	462b      	mov	r3, r5
 800565a:	1891      	adds	r1, r2, r2
 800565c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800565e:	415b      	adcs	r3, r3
 8005660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005666:	4621      	mov	r1, r4
 8005668:	eb12 0801 	adds.w	r8, r2, r1
 800566c:	4629      	mov	r1, r5
 800566e:	eb43 0901 	adc.w	r9, r3, r1
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800567e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005686:	4690      	mov	r8, r2
 8005688:	4699      	mov	r9, r3
 800568a:	4623      	mov	r3, r4
 800568c:	eb18 0303 	adds.w	r3, r8, r3
 8005690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005694:	462b      	mov	r3, r5
 8005696:	eb49 0303 	adc.w	r3, r9, r3
 800569a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056b2:	460b      	mov	r3, r1
 80056b4:	18db      	adds	r3, r3, r3
 80056b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80056b8:	4613      	mov	r3, r2
 80056ba:	eb42 0303 	adc.w	r3, r2, r3
 80056be:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056c8:	f7fb f940 	bl	800094c <__aeabi_uldivmod>
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4b61      	ldr	r3, [pc, #388]	@ (8005858 <UART_SetConfig+0x2d4>)
 80056d2:	fba3 2302 	umull	r2, r3, r3, r2
 80056d6:	095b      	lsrs	r3, r3, #5
 80056d8:	011c      	lsls	r4, r3, #4
 80056da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056de:	2200      	movs	r2, #0
 80056e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056ec:	4642      	mov	r2, r8
 80056ee:	464b      	mov	r3, r9
 80056f0:	1891      	adds	r1, r2, r2
 80056f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056f4:	415b      	adcs	r3, r3
 80056f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80056fc:	4641      	mov	r1, r8
 80056fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005702:	4649      	mov	r1, r9
 8005704:	eb43 0b01 	adc.w	fp, r3, r1
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800571c:	4692      	mov	sl, r2
 800571e:	469b      	mov	fp, r3
 8005720:	4643      	mov	r3, r8
 8005722:	eb1a 0303 	adds.w	r3, sl, r3
 8005726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800572a:	464b      	mov	r3, r9
 800572c:	eb4b 0303 	adc.w	r3, fp, r3
 8005730:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005740:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005748:	460b      	mov	r3, r1
 800574a:	18db      	adds	r3, r3, r3
 800574c:	643b      	str	r3, [r7, #64]	@ 0x40
 800574e:	4613      	mov	r3, r2
 8005750:	eb42 0303 	adc.w	r3, r2, r3
 8005754:	647b      	str	r3, [r7, #68]	@ 0x44
 8005756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800575a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800575e:	f7fb f8f5 	bl	800094c <__aeabi_uldivmod>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4611      	mov	r1, r2
 8005768:	4b3b      	ldr	r3, [pc, #236]	@ (8005858 <UART_SetConfig+0x2d4>)
 800576a:	fba3 2301 	umull	r2, r3, r3, r1
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	2264      	movs	r2, #100	@ 0x64
 8005772:	fb02 f303 	mul.w	r3, r2, r3
 8005776:	1acb      	subs	r3, r1, r3
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800577e:	4b36      	ldr	r3, [pc, #216]	@ (8005858 <UART_SetConfig+0x2d4>)
 8005780:	fba3 2302 	umull	r2, r3, r3, r2
 8005784:	095b      	lsrs	r3, r3, #5
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800578c:	441c      	add	r4, r3
 800578e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005792:	2200      	movs	r2, #0
 8005794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005798:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800579c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057a8:	415b      	adcs	r3, r3
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057b0:	4641      	mov	r1, r8
 80057b2:	1851      	adds	r1, r2, r1
 80057b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80057b6:	4649      	mov	r1, r9
 80057b8:	414b      	adcs	r3, r1
 80057ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057c8:	4659      	mov	r1, fp
 80057ca:	00cb      	lsls	r3, r1, #3
 80057cc:	4651      	mov	r1, sl
 80057ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d2:	4651      	mov	r1, sl
 80057d4:	00ca      	lsls	r2, r1, #3
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	4603      	mov	r3, r0
 80057dc:	4642      	mov	r2, r8
 80057de:	189b      	adds	r3, r3, r2
 80057e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057e4:	464b      	mov	r3, r9
 80057e6:	460a      	mov	r2, r1
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80057fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005804:	460b      	mov	r3, r1
 8005806:	18db      	adds	r3, r3, r3
 8005808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800580a:	4613      	mov	r3, r2
 800580c:	eb42 0303 	adc.w	r3, r2, r3
 8005810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800581a:	f7fb f897 	bl	800094c <__aeabi_uldivmod>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <UART_SetConfig+0x2d4>)
 8005824:	fba3 1302 	umull	r1, r3, r3, r2
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	2164      	movs	r1, #100	@ 0x64
 800582c:	fb01 f303 	mul.w	r3, r1, r3
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	3332      	adds	r3, #50	@ 0x32
 8005836:	4a08      	ldr	r2, [pc, #32]	@ (8005858 <UART_SetConfig+0x2d4>)
 8005838:	fba2 2303 	umull	r2, r3, r2, r3
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	f003 0207 	and.w	r2, r3, #7
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4422      	add	r2, r4
 800584a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800584c:	e106      	b.n	8005a5c <UART_SetConfig+0x4d8>
 800584e:	bf00      	nop
 8005850:	40011000 	.word	0x40011000
 8005854:	40011400 	.word	0x40011400
 8005858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800585c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005860:	2200      	movs	r2, #0
 8005862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005866:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800586a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800586e:	4642      	mov	r2, r8
 8005870:	464b      	mov	r3, r9
 8005872:	1891      	adds	r1, r2, r2
 8005874:	6239      	str	r1, [r7, #32]
 8005876:	415b      	adcs	r3, r3
 8005878:	627b      	str	r3, [r7, #36]	@ 0x24
 800587a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800587e:	4641      	mov	r1, r8
 8005880:	1854      	adds	r4, r2, r1
 8005882:	4649      	mov	r1, r9
 8005884:	eb43 0501 	adc.w	r5, r3, r1
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	00eb      	lsls	r3, r5, #3
 8005892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005896:	00e2      	lsls	r2, r4, #3
 8005898:	4614      	mov	r4, r2
 800589a:	461d      	mov	r5, r3
 800589c:	4643      	mov	r3, r8
 800589e:	18e3      	adds	r3, r4, r3
 80058a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058a4:	464b      	mov	r3, r9
 80058a6:	eb45 0303 	adc.w	r3, r5, r3
 80058aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	f04f 0300 	mov.w	r3, #0
 80058c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058ca:	4629      	mov	r1, r5
 80058cc:	008b      	lsls	r3, r1, #2
 80058ce:	4621      	mov	r1, r4
 80058d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058d4:	4621      	mov	r1, r4
 80058d6:	008a      	lsls	r2, r1, #2
 80058d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058dc:	f7fb f836 	bl	800094c <__aeabi_uldivmod>
 80058e0:	4602      	mov	r2, r0
 80058e2:	460b      	mov	r3, r1
 80058e4:	4b60      	ldr	r3, [pc, #384]	@ (8005a68 <UART_SetConfig+0x4e4>)
 80058e6:	fba3 2302 	umull	r2, r3, r3, r2
 80058ea:	095b      	lsrs	r3, r3, #5
 80058ec:	011c      	lsls	r4, r3, #4
 80058ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f2:	2200      	movs	r2, #0
 80058f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80058f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80058fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005900:	4642      	mov	r2, r8
 8005902:	464b      	mov	r3, r9
 8005904:	1891      	adds	r1, r2, r2
 8005906:	61b9      	str	r1, [r7, #24]
 8005908:	415b      	adcs	r3, r3
 800590a:	61fb      	str	r3, [r7, #28]
 800590c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005910:	4641      	mov	r1, r8
 8005912:	1851      	adds	r1, r2, r1
 8005914:	6139      	str	r1, [r7, #16]
 8005916:	4649      	mov	r1, r9
 8005918:	414b      	adcs	r3, r1
 800591a:	617b      	str	r3, [r7, #20]
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005928:	4659      	mov	r1, fp
 800592a:	00cb      	lsls	r3, r1, #3
 800592c:	4651      	mov	r1, sl
 800592e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005932:	4651      	mov	r1, sl
 8005934:	00ca      	lsls	r2, r1, #3
 8005936:	4610      	mov	r0, r2
 8005938:	4619      	mov	r1, r3
 800593a:	4603      	mov	r3, r0
 800593c:	4642      	mov	r2, r8
 800593e:	189b      	adds	r3, r3, r2
 8005940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005944:	464b      	mov	r3, r9
 8005946:	460a      	mov	r2, r1
 8005948:	eb42 0303 	adc.w	r3, r2, r3
 800594c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800595a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005968:	4649      	mov	r1, r9
 800596a:	008b      	lsls	r3, r1, #2
 800596c:	4641      	mov	r1, r8
 800596e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005972:	4641      	mov	r1, r8
 8005974:	008a      	lsls	r2, r1, #2
 8005976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800597a:	f7fa ffe7 	bl	800094c <__aeabi_uldivmod>
 800597e:	4602      	mov	r2, r0
 8005980:	460b      	mov	r3, r1
 8005982:	4611      	mov	r1, r2
 8005984:	4b38      	ldr	r3, [pc, #224]	@ (8005a68 <UART_SetConfig+0x4e4>)
 8005986:	fba3 2301 	umull	r2, r3, r3, r1
 800598a:	095b      	lsrs	r3, r3, #5
 800598c:	2264      	movs	r2, #100	@ 0x64
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	1acb      	subs	r3, r1, r3
 8005994:	011b      	lsls	r3, r3, #4
 8005996:	3332      	adds	r3, #50	@ 0x32
 8005998:	4a33      	ldr	r2, [pc, #204]	@ (8005a68 <UART_SetConfig+0x4e4>)
 800599a:	fba2 2303 	umull	r2, r3, r2, r3
 800599e:	095b      	lsrs	r3, r3, #5
 80059a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059a4:	441c      	add	r4, r3
 80059a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059aa:	2200      	movs	r2, #0
 80059ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80059ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80059b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059b4:	4642      	mov	r2, r8
 80059b6:	464b      	mov	r3, r9
 80059b8:	1891      	adds	r1, r2, r2
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	415b      	adcs	r3, r3
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059c4:	4641      	mov	r1, r8
 80059c6:	1851      	adds	r1, r2, r1
 80059c8:	6039      	str	r1, [r7, #0]
 80059ca:	4649      	mov	r1, r9
 80059cc:	414b      	adcs	r3, r1
 80059ce:	607b      	str	r3, [r7, #4]
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059dc:	4659      	mov	r1, fp
 80059de:	00cb      	lsls	r3, r1, #3
 80059e0:	4651      	mov	r1, sl
 80059e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059e6:	4651      	mov	r1, sl
 80059e8:	00ca      	lsls	r2, r1, #3
 80059ea:	4610      	mov	r0, r2
 80059ec:	4619      	mov	r1, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	4642      	mov	r2, r8
 80059f2:	189b      	adds	r3, r3, r2
 80059f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059f6:	464b      	mov	r3, r9
 80059f8:	460a      	mov	r2, r1
 80059fa:	eb42 0303 	adc.w	r3, r2, r3
 80059fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a0c:	f04f 0200 	mov.w	r2, #0
 8005a10:	f04f 0300 	mov.w	r3, #0
 8005a14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a18:	4649      	mov	r1, r9
 8005a1a:	008b      	lsls	r3, r1, #2
 8005a1c:	4641      	mov	r1, r8
 8005a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a22:	4641      	mov	r1, r8
 8005a24:	008a      	lsls	r2, r1, #2
 8005a26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a2a:	f7fa ff8f 	bl	800094c <__aeabi_uldivmod>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	460b      	mov	r3, r1
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <UART_SetConfig+0x4e4>)
 8005a34:	fba3 1302 	umull	r1, r3, r3, r2
 8005a38:	095b      	lsrs	r3, r3, #5
 8005a3a:	2164      	movs	r1, #100	@ 0x64
 8005a3c:	fb01 f303 	mul.w	r3, r1, r3
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	3332      	adds	r3, #50	@ 0x32
 8005a46:	4a08      	ldr	r2, [pc, #32]	@ (8005a68 <UART_SetConfig+0x4e4>)
 8005a48:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4c:	095b      	lsrs	r3, r3, #5
 8005a4e:	f003 020f 	and.w	r2, r3, #15
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4422      	add	r2, r4
 8005a5a:	609a      	str	r2, [r3, #8]
}
 8005a5c:	bf00      	nop
 8005a5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a62:	46bd      	mov	sp, r7
 8005a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a68:	51eb851f 	.word	0x51eb851f

08005a6c <siprintf>:
 8005a6c:	b40e      	push	{r1, r2, r3}
 8005a6e:	b500      	push	{lr}
 8005a70:	b09c      	sub	sp, #112	@ 0x70
 8005a72:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a74:	9002      	str	r0, [sp, #8]
 8005a76:	9006      	str	r0, [sp, #24]
 8005a78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a7c:	4809      	ldr	r0, [pc, #36]	@ (8005aa4 <siprintf+0x38>)
 8005a7e:	9107      	str	r1, [sp, #28]
 8005a80:	9104      	str	r1, [sp, #16]
 8005a82:	4909      	ldr	r1, [pc, #36]	@ (8005aa8 <siprintf+0x3c>)
 8005a84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a88:	9105      	str	r1, [sp, #20]
 8005a8a:	6800      	ldr	r0, [r0, #0]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	a902      	add	r1, sp, #8
 8005a90:	f000 f994 	bl	8005dbc <_svfiprintf_r>
 8005a94:	9b02      	ldr	r3, [sp, #8]
 8005a96:	2200      	movs	r2, #0
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	b01c      	add	sp, #112	@ 0x70
 8005a9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa0:	b003      	add	sp, #12
 8005aa2:	4770      	bx	lr
 8005aa4:	20000038 	.word	0x20000038
 8005aa8:	ffff0208 	.word	0xffff0208

08005aac <memset>:
 8005aac:	4402      	add	r2, r0
 8005aae:	4603      	mov	r3, r0
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d100      	bne.n	8005ab6 <memset+0xa>
 8005ab4:	4770      	bx	lr
 8005ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8005aba:	e7f9      	b.n	8005ab0 <memset+0x4>

08005abc <__errno>:
 8005abc:	4b01      	ldr	r3, [pc, #4]	@ (8005ac4 <__errno+0x8>)
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	20000038 	.word	0x20000038

08005ac8 <__libc_init_array>:
 8005ac8:	b570      	push	{r4, r5, r6, lr}
 8005aca:	4d0d      	ldr	r5, [pc, #52]	@ (8005b00 <__libc_init_array+0x38>)
 8005acc:	4c0d      	ldr	r4, [pc, #52]	@ (8005b04 <__libc_init_array+0x3c>)
 8005ace:	1b64      	subs	r4, r4, r5
 8005ad0:	10a4      	asrs	r4, r4, #2
 8005ad2:	2600      	movs	r6, #0
 8005ad4:	42a6      	cmp	r6, r4
 8005ad6:	d109      	bne.n	8005aec <__libc_init_array+0x24>
 8005ad8:	4d0b      	ldr	r5, [pc, #44]	@ (8005b08 <__libc_init_array+0x40>)
 8005ada:	4c0c      	ldr	r4, [pc, #48]	@ (8005b0c <__libc_init_array+0x44>)
 8005adc:	f000 fc66 	bl	80063ac <_init>
 8005ae0:	1b64      	subs	r4, r4, r5
 8005ae2:	10a4      	asrs	r4, r4, #2
 8005ae4:	2600      	movs	r6, #0
 8005ae6:	42a6      	cmp	r6, r4
 8005ae8:	d105      	bne.n	8005af6 <__libc_init_array+0x2e>
 8005aea:	bd70      	pop	{r4, r5, r6, pc}
 8005aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af0:	4798      	blx	r3
 8005af2:	3601      	adds	r6, #1
 8005af4:	e7ee      	b.n	8005ad4 <__libc_init_array+0xc>
 8005af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afa:	4798      	blx	r3
 8005afc:	3601      	adds	r6, #1
 8005afe:	e7f2      	b.n	8005ae6 <__libc_init_array+0x1e>
 8005b00:	0800643c 	.word	0x0800643c
 8005b04:	0800643c 	.word	0x0800643c
 8005b08:	0800643c 	.word	0x0800643c
 8005b0c:	08006440 	.word	0x08006440

08005b10 <__retarget_lock_acquire_recursive>:
 8005b10:	4770      	bx	lr

08005b12 <__retarget_lock_release_recursive>:
 8005b12:	4770      	bx	lr

08005b14 <_free_r>:
 8005b14:	b538      	push	{r3, r4, r5, lr}
 8005b16:	4605      	mov	r5, r0
 8005b18:	2900      	cmp	r1, #0
 8005b1a:	d041      	beq.n	8005ba0 <_free_r+0x8c>
 8005b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b20:	1f0c      	subs	r4, r1, #4
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	bfb8      	it	lt
 8005b26:	18e4      	addlt	r4, r4, r3
 8005b28:	f000 f8e0 	bl	8005cec <__malloc_lock>
 8005b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ba4 <_free_r+0x90>)
 8005b2e:	6813      	ldr	r3, [r2, #0]
 8005b30:	b933      	cbnz	r3, 8005b40 <_free_r+0x2c>
 8005b32:	6063      	str	r3, [r4, #4]
 8005b34:	6014      	str	r4, [r2, #0]
 8005b36:	4628      	mov	r0, r5
 8005b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b3c:	f000 b8dc 	b.w	8005cf8 <__malloc_unlock>
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d908      	bls.n	8005b56 <_free_r+0x42>
 8005b44:	6820      	ldr	r0, [r4, #0]
 8005b46:	1821      	adds	r1, r4, r0
 8005b48:	428b      	cmp	r3, r1
 8005b4a:	bf01      	itttt	eq
 8005b4c:	6819      	ldreq	r1, [r3, #0]
 8005b4e:	685b      	ldreq	r3, [r3, #4]
 8005b50:	1809      	addeq	r1, r1, r0
 8005b52:	6021      	streq	r1, [r4, #0]
 8005b54:	e7ed      	b.n	8005b32 <_free_r+0x1e>
 8005b56:	461a      	mov	r2, r3
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b10b      	cbz	r3, 8005b60 <_free_r+0x4c>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d9fa      	bls.n	8005b56 <_free_r+0x42>
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	1850      	adds	r0, r2, r1
 8005b64:	42a0      	cmp	r0, r4
 8005b66:	d10b      	bne.n	8005b80 <_free_r+0x6c>
 8005b68:	6820      	ldr	r0, [r4, #0]
 8005b6a:	4401      	add	r1, r0
 8005b6c:	1850      	adds	r0, r2, r1
 8005b6e:	4283      	cmp	r3, r0
 8005b70:	6011      	str	r1, [r2, #0]
 8005b72:	d1e0      	bne.n	8005b36 <_free_r+0x22>
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6053      	str	r3, [r2, #4]
 8005b7a:	4408      	add	r0, r1
 8005b7c:	6010      	str	r0, [r2, #0]
 8005b7e:	e7da      	b.n	8005b36 <_free_r+0x22>
 8005b80:	d902      	bls.n	8005b88 <_free_r+0x74>
 8005b82:	230c      	movs	r3, #12
 8005b84:	602b      	str	r3, [r5, #0]
 8005b86:	e7d6      	b.n	8005b36 <_free_r+0x22>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf04      	itt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	bf04      	itt	eq
 8005b98:	1809      	addeq	r1, r1, r0
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	6054      	str	r4, [r2, #4]
 8005b9e:	e7ca      	b.n	8005b36 <_free_r+0x22>
 8005ba0:	bd38      	pop	{r3, r4, r5, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200004d0 	.word	0x200004d0

08005ba8 <sbrk_aligned>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4e0f      	ldr	r6, [pc, #60]	@ (8005be8 <sbrk_aligned+0x40>)
 8005bac:	460c      	mov	r4, r1
 8005bae:	6831      	ldr	r1, [r6, #0]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b911      	cbnz	r1, 8005bba <sbrk_aligned+0x12>
 8005bb4:	f000 fba6 	bl	8006304 <_sbrk_r>
 8005bb8:	6030      	str	r0, [r6, #0]
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fba1 	bl	8006304 <_sbrk_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d103      	bne.n	8005bce <sbrk_aligned+0x26>
 8005bc6:	f04f 34ff 	mov.w	r4, #4294967295
 8005bca:	4620      	mov	r0, r4
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	1cc4      	adds	r4, r0, #3
 8005bd0:	f024 0403 	bic.w	r4, r4, #3
 8005bd4:	42a0      	cmp	r0, r4
 8005bd6:	d0f8      	beq.n	8005bca <sbrk_aligned+0x22>
 8005bd8:	1a21      	subs	r1, r4, r0
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f000 fb92 	bl	8006304 <_sbrk_r>
 8005be0:	3001      	adds	r0, #1
 8005be2:	d1f2      	bne.n	8005bca <sbrk_aligned+0x22>
 8005be4:	e7ef      	b.n	8005bc6 <sbrk_aligned+0x1e>
 8005be6:	bf00      	nop
 8005be8:	200004cc 	.word	0x200004cc

08005bec <_malloc_r>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	1ccd      	adds	r5, r1, #3
 8005bf2:	f025 0503 	bic.w	r5, r5, #3
 8005bf6:	3508      	adds	r5, #8
 8005bf8:	2d0c      	cmp	r5, #12
 8005bfa:	bf38      	it	cc
 8005bfc:	250c      	movcc	r5, #12
 8005bfe:	2d00      	cmp	r5, #0
 8005c00:	4606      	mov	r6, r0
 8005c02:	db01      	blt.n	8005c08 <_malloc_r+0x1c>
 8005c04:	42a9      	cmp	r1, r5
 8005c06:	d904      	bls.n	8005c12 <_malloc_r+0x26>
 8005c08:	230c      	movs	r3, #12
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ce8 <_malloc_r+0xfc>
 8005c16:	f000 f869 	bl	8005cec <__malloc_lock>
 8005c1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1e:	461c      	mov	r4, r3
 8005c20:	bb44      	cbnz	r4, 8005c74 <_malloc_r+0x88>
 8005c22:	4629      	mov	r1, r5
 8005c24:	4630      	mov	r0, r6
 8005c26:	f7ff ffbf 	bl	8005ba8 <sbrk_aligned>
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	4604      	mov	r4, r0
 8005c2e:	d158      	bne.n	8005ce2 <_malloc_r+0xf6>
 8005c30:	f8d8 4000 	ldr.w	r4, [r8]
 8005c34:	4627      	mov	r7, r4
 8005c36:	2f00      	cmp	r7, #0
 8005c38:	d143      	bne.n	8005cc2 <_malloc_r+0xd6>
 8005c3a:	2c00      	cmp	r4, #0
 8005c3c:	d04b      	beq.n	8005cd6 <_malloc_r+0xea>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	4639      	mov	r1, r7
 8005c42:	4630      	mov	r0, r6
 8005c44:	eb04 0903 	add.w	r9, r4, r3
 8005c48:	f000 fb5c 	bl	8006304 <_sbrk_r>
 8005c4c:	4581      	cmp	r9, r0
 8005c4e:	d142      	bne.n	8005cd6 <_malloc_r+0xea>
 8005c50:	6821      	ldr	r1, [r4, #0]
 8005c52:	1a6d      	subs	r5, r5, r1
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7ff ffa6 	bl	8005ba8 <sbrk_aligned>
 8005c5c:	3001      	adds	r0, #1
 8005c5e:	d03a      	beq.n	8005cd6 <_malloc_r+0xea>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	442b      	add	r3, r5
 8005c64:	6023      	str	r3, [r4, #0]
 8005c66:	f8d8 3000 	ldr.w	r3, [r8]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	bb62      	cbnz	r2, 8005cc8 <_malloc_r+0xdc>
 8005c6e:	f8c8 7000 	str.w	r7, [r8]
 8005c72:	e00f      	b.n	8005c94 <_malloc_r+0xa8>
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	1b52      	subs	r2, r2, r5
 8005c78:	d420      	bmi.n	8005cbc <_malloc_r+0xd0>
 8005c7a:	2a0b      	cmp	r2, #11
 8005c7c:	d917      	bls.n	8005cae <_malloc_r+0xc2>
 8005c7e:	1961      	adds	r1, r4, r5
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	6025      	str	r5, [r4, #0]
 8005c84:	bf18      	it	ne
 8005c86:	6059      	strne	r1, [r3, #4]
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	bf08      	it	eq
 8005c8c:	f8c8 1000 	streq.w	r1, [r8]
 8005c90:	5162      	str	r2, [r4, r5]
 8005c92:	604b      	str	r3, [r1, #4]
 8005c94:	4630      	mov	r0, r6
 8005c96:	f000 f82f 	bl	8005cf8 <__malloc_unlock>
 8005c9a:	f104 000b 	add.w	r0, r4, #11
 8005c9e:	1d23      	adds	r3, r4, #4
 8005ca0:	f020 0007 	bic.w	r0, r0, #7
 8005ca4:	1ac2      	subs	r2, r0, r3
 8005ca6:	bf1c      	itt	ne
 8005ca8:	1a1b      	subne	r3, r3, r0
 8005caa:	50a3      	strne	r3, [r4, r2]
 8005cac:	e7af      	b.n	8005c0e <_malloc_r+0x22>
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	bf0c      	ite	eq
 8005cb4:	f8c8 2000 	streq.w	r2, [r8]
 8005cb8:	605a      	strne	r2, [r3, #4]
 8005cba:	e7eb      	b.n	8005c94 <_malloc_r+0xa8>
 8005cbc:	4623      	mov	r3, r4
 8005cbe:	6864      	ldr	r4, [r4, #4]
 8005cc0:	e7ae      	b.n	8005c20 <_malloc_r+0x34>
 8005cc2:	463c      	mov	r4, r7
 8005cc4:	687f      	ldr	r7, [r7, #4]
 8005cc6:	e7b6      	b.n	8005c36 <_malloc_r+0x4a>
 8005cc8:	461a      	mov	r2, r3
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	42a3      	cmp	r3, r4
 8005cce:	d1fb      	bne.n	8005cc8 <_malloc_r+0xdc>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6053      	str	r3, [r2, #4]
 8005cd4:	e7de      	b.n	8005c94 <_malloc_r+0xa8>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6033      	str	r3, [r6, #0]
 8005cda:	4630      	mov	r0, r6
 8005cdc:	f000 f80c 	bl	8005cf8 <__malloc_unlock>
 8005ce0:	e794      	b.n	8005c0c <_malloc_r+0x20>
 8005ce2:	6005      	str	r5, [r0, #0]
 8005ce4:	e7d6      	b.n	8005c94 <_malloc_r+0xa8>
 8005ce6:	bf00      	nop
 8005ce8:	200004d0 	.word	0x200004d0

08005cec <__malloc_lock>:
 8005cec:	4801      	ldr	r0, [pc, #4]	@ (8005cf4 <__malloc_lock+0x8>)
 8005cee:	f7ff bf0f 	b.w	8005b10 <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	200004c8 	.word	0x200004c8

08005cf8 <__malloc_unlock>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	@ (8005d00 <__malloc_unlock+0x8>)
 8005cfa:	f7ff bf0a 	b.w	8005b12 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	200004c8 	.word	0x200004c8

08005d04 <__ssputs_r>:
 8005d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d08:	688e      	ldr	r6, [r1, #8]
 8005d0a:	461f      	mov	r7, r3
 8005d0c:	42be      	cmp	r6, r7
 8005d0e:	680b      	ldr	r3, [r1, #0]
 8005d10:	4682      	mov	sl, r0
 8005d12:	460c      	mov	r4, r1
 8005d14:	4690      	mov	r8, r2
 8005d16:	d82d      	bhi.n	8005d74 <__ssputs_r+0x70>
 8005d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d20:	d026      	beq.n	8005d70 <__ssputs_r+0x6c>
 8005d22:	6965      	ldr	r5, [r4, #20]
 8005d24:	6909      	ldr	r1, [r1, #16]
 8005d26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d2a:	eba3 0901 	sub.w	r9, r3, r1
 8005d2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d32:	1c7b      	adds	r3, r7, #1
 8005d34:	444b      	add	r3, r9
 8005d36:	106d      	asrs	r5, r5, #1
 8005d38:	429d      	cmp	r5, r3
 8005d3a:	bf38      	it	cc
 8005d3c:	461d      	movcc	r5, r3
 8005d3e:	0553      	lsls	r3, r2, #21
 8005d40:	d527      	bpl.n	8005d92 <__ssputs_r+0x8e>
 8005d42:	4629      	mov	r1, r5
 8005d44:	f7ff ff52 	bl	8005bec <_malloc_r>
 8005d48:	4606      	mov	r6, r0
 8005d4a:	b360      	cbz	r0, 8005da6 <__ssputs_r+0xa2>
 8005d4c:	6921      	ldr	r1, [r4, #16]
 8005d4e:	464a      	mov	r2, r9
 8005d50:	f000 fae8 	bl	8006324 <memcpy>
 8005d54:	89a3      	ldrh	r3, [r4, #12]
 8005d56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d5e:	81a3      	strh	r3, [r4, #12]
 8005d60:	6126      	str	r6, [r4, #16]
 8005d62:	6165      	str	r5, [r4, #20]
 8005d64:	444e      	add	r6, r9
 8005d66:	eba5 0509 	sub.w	r5, r5, r9
 8005d6a:	6026      	str	r6, [r4, #0]
 8005d6c:	60a5      	str	r5, [r4, #8]
 8005d6e:	463e      	mov	r6, r7
 8005d70:	42be      	cmp	r6, r7
 8005d72:	d900      	bls.n	8005d76 <__ssputs_r+0x72>
 8005d74:	463e      	mov	r6, r7
 8005d76:	6820      	ldr	r0, [r4, #0]
 8005d78:	4632      	mov	r2, r6
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	f000 faa8 	bl	80062d0 <memmove>
 8005d80:	68a3      	ldr	r3, [r4, #8]
 8005d82:	1b9b      	subs	r3, r3, r6
 8005d84:	60a3      	str	r3, [r4, #8]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	4433      	add	r3, r6
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2000      	movs	r0, #0
 8005d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d92:	462a      	mov	r2, r5
 8005d94:	f000 fad4 	bl	8006340 <_realloc_r>
 8005d98:	4606      	mov	r6, r0
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1e0      	bne.n	8005d60 <__ssputs_r+0x5c>
 8005d9e:	6921      	ldr	r1, [r4, #16]
 8005da0:	4650      	mov	r0, sl
 8005da2:	f7ff feb7 	bl	8005b14 <_free_r>
 8005da6:	230c      	movs	r3, #12
 8005da8:	f8ca 3000 	str.w	r3, [sl]
 8005dac:	89a3      	ldrh	r3, [r4, #12]
 8005dae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005db2:	81a3      	strh	r3, [r4, #12]
 8005db4:	f04f 30ff 	mov.w	r0, #4294967295
 8005db8:	e7e9      	b.n	8005d8e <__ssputs_r+0x8a>
	...

08005dbc <_svfiprintf_r>:
 8005dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc0:	4698      	mov	r8, r3
 8005dc2:	898b      	ldrh	r3, [r1, #12]
 8005dc4:	061b      	lsls	r3, r3, #24
 8005dc6:	b09d      	sub	sp, #116	@ 0x74
 8005dc8:	4607      	mov	r7, r0
 8005dca:	460d      	mov	r5, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	d510      	bpl.n	8005df2 <_svfiprintf_r+0x36>
 8005dd0:	690b      	ldr	r3, [r1, #16]
 8005dd2:	b973      	cbnz	r3, 8005df2 <_svfiprintf_r+0x36>
 8005dd4:	2140      	movs	r1, #64	@ 0x40
 8005dd6:	f7ff ff09 	bl	8005bec <_malloc_r>
 8005dda:	6028      	str	r0, [r5, #0]
 8005ddc:	6128      	str	r0, [r5, #16]
 8005dde:	b930      	cbnz	r0, 8005dee <_svfiprintf_r+0x32>
 8005de0:	230c      	movs	r3, #12
 8005de2:	603b      	str	r3, [r7, #0]
 8005de4:	f04f 30ff 	mov.w	r0, #4294967295
 8005de8:	b01d      	add	sp, #116	@ 0x74
 8005dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dee:	2340      	movs	r3, #64	@ 0x40
 8005df0:	616b      	str	r3, [r5, #20]
 8005df2:	2300      	movs	r3, #0
 8005df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005df6:	2320      	movs	r3, #32
 8005df8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e00:	2330      	movs	r3, #48	@ 0x30
 8005e02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fa0 <_svfiprintf_r+0x1e4>
 8005e06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e0a:	f04f 0901 	mov.w	r9, #1
 8005e0e:	4623      	mov	r3, r4
 8005e10:	469a      	mov	sl, r3
 8005e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e16:	b10a      	cbz	r2, 8005e1c <_svfiprintf_r+0x60>
 8005e18:	2a25      	cmp	r2, #37	@ 0x25
 8005e1a:	d1f9      	bne.n	8005e10 <_svfiprintf_r+0x54>
 8005e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005e20:	d00b      	beq.n	8005e3a <_svfiprintf_r+0x7e>
 8005e22:	465b      	mov	r3, fp
 8005e24:	4622      	mov	r2, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	4638      	mov	r0, r7
 8005e2a:	f7ff ff6b 	bl	8005d04 <__ssputs_r>
 8005e2e:	3001      	adds	r0, #1
 8005e30:	f000 80a7 	beq.w	8005f82 <_svfiprintf_r+0x1c6>
 8005e34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e36:	445a      	add	r2, fp
 8005e38:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f000 809f 	beq.w	8005f82 <_svfiprintf_r+0x1c6>
 8005e44:	2300      	movs	r3, #0
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e4e:	f10a 0a01 	add.w	sl, sl, #1
 8005e52:	9304      	str	r3, [sp, #16]
 8005e54:	9307      	str	r3, [sp, #28]
 8005e56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e5c:	4654      	mov	r4, sl
 8005e5e:	2205      	movs	r2, #5
 8005e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e64:	484e      	ldr	r0, [pc, #312]	@ (8005fa0 <_svfiprintf_r+0x1e4>)
 8005e66:	f7fa f9c3 	bl	80001f0 <memchr>
 8005e6a:	9a04      	ldr	r2, [sp, #16]
 8005e6c:	b9d8      	cbnz	r0, 8005ea6 <_svfiprintf_r+0xea>
 8005e6e:	06d0      	lsls	r0, r2, #27
 8005e70:	bf44      	itt	mi
 8005e72:	2320      	movmi	r3, #32
 8005e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e78:	0711      	lsls	r1, r2, #28
 8005e7a:	bf44      	itt	mi
 8005e7c:	232b      	movmi	r3, #43	@ 0x2b
 8005e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e82:	f89a 3000 	ldrb.w	r3, [sl]
 8005e86:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e88:	d015      	beq.n	8005eb6 <_svfiprintf_r+0xfa>
 8005e8a:	9a07      	ldr	r2, [sp, #28]
 8005e8c:	4654      	mov	r4, sl
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f04f 0c0a 	mov.w	ip, #10
 8005e94:	4621      	mov	r1, r4
 8005e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e9a:	3b30      	subs	r3, #48	@ 0x30
 8005e9c:	2b09      	cmp	r3, #9
 8005e9e:	d94b      	bls.n	8005f38 <_svfiprintf_r+0x17c>
 8005ea0:	b1b0      	cbz	r0, 8005ed0 <_svfiprintf_r+0x114>
 8005ea2:	9207      	str	r2, [sp, #28]
 8005ea4:	e014      	b.n	8005ed0 <_svfiprintf_r+0x114>
 8005ea6:	eba0 0308 	sub.w	r3, r0, r8
 8005eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	9304      	str	r3, [sp, #16]
 8005eb2:	46a2      	mov	sl, r4
 8005eb4:	e7d2      	b.n	8005e5c <_svfiprintf_r+0xa0>
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	1d19      	adds	r1, r3, #4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	9103      	str	r1, [sp, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	bfbb      	ittet	lt
 8005ec2:	425b      	neglt	r3, r3
 8005ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ec8:	9307      	strge	r3, [sp, #28]
 8005eca:	9307      	strlt	r3, [sp, #28]
 8005ecc:	bfb8      	it	lt
 8005ece:	9204      	strlt	r2, [sp, #16]
 8005ed0:	7823      	ldrb	r3, [r4, #0]
 8005ed2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005ed4:	d10a      	bne.n	8005eec <_svfiprintf_r+0x130>
 8005ed6:	7863      	ldrb	r3, [r4, #1]
 8005ed8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eda:	d132      	bne.n	8005f42 <_svfiprintf_r+0x186>
 8005edc:	9b03      	ldr	r3, [sp, #12]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	9203      	str	r2, [sp, #12]
 8005ee4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ee8:	3402      	adds	r4, #2
 8005eea:	9305      	str	r3, [sp, #20]
 8005eec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fb0 <_svfiprintf_r+0x1f4>
 8005ef0:	7821      	ldrb	r1, [r4, #0]
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	4650      	mov	r0, sl
 8005ef6:	f7fa f97b 	bl	80001f0 <memchr>
 8005efa:	b138      	cbz	r0, 8005f0c <_svfiprintf_r+0x150>
 8005efc:	9b04      	ldr	r3, [sp, #16]
 8005efe:	eba0 000a 	sub.w	r0, r0, sl
 8005f02:	2240      	movs	r2, #64	@ 0x40
 8005f04:	4082      	lsls	r2, r0
 8005f06:	4313      	orrs	r3, r2
 8005f08:	3401      	adds	r4, #1
 8005f0a:	9304      	str	r3, [sp, #16]
 8005f0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f10:	4824      	ldr	r0, [pc, #144]	@ (8005fa4 <_svfiprintf_r+0x1e8>)
 8005f12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f16:	2206      	movs	r2, #6
 8005f18:	f7fa f96a 	bl	80001f0 <memchr>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d036      	beq.n	8005f8e <_svfiprintf_r+0x1d2>
 8005f20:	4b21      	ldr	r3, [pc, #132]	@ (8005fa8 <_svfiprintf_r+0x1ec>)
 8005f22:	bb1b      	cbnz	r3, 8005f6c <_svfiprintf_r+0x1b0>
 8005f24:	9b03      	ldr	r3, [sp, #12]
 8005f26:	3307      	adds	r3, #7
 8005f28:	f023 0307 	bic.w	r3, r3, #7
 8005f2c:	3308      	adds	r3, #8
 8005f2e:	9303      	str	r3, [sp, #12]
 8005f30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f32:	4433      	add	r3, r6
 8005f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f36:	e76a      	b.n	8005e0e <_svfiprintf_r+0x52>
 8005f38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f3c:	460c      	mov	r4, r1
 8005f3e:	2001      	movs	r0, #1
 8005f40:	e7a8      	b.n	8005e94 <_svfiprintf_r+0xd8>
 8005f42:	2300      	movs	r3, #0
 8005f44:	3401      	adds	r4, #1
 8005f46:	9305      	str	r3, [sp, #20]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	f04f 0c0a 	mov.w	ip, #10
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f54:	3a30      	subs	r2, #48	@ 0x30
 8005f56:	2a09      	cmp	r2, #9
 8005f58:	d903      	bls.n	8005f62 <_svfiprintf_r+0x1a6>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c6      	beq.n	8005eec <_svfiprintf_r+0x130>
 8005f5e:	9105      	str	r1, [sp, #20]
 8005f60:	e7c4      	b.n	8005eec <_svfiprintf_r+0x130>
 8005f62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f66:	4604      	mov	r4, r0
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e7f0      	b.n	8005f4e <_svfiprintf_r+0x192>
 8005f6c:	ab03      	add	r3, sp, #12
 8005f6e:	9300      	str	r3, [sp, #0]
 8005f70:	462a      	mov	r2, r5
 8005f72:	4b0e      	ldr	r3, [pc, #56]	@ (8005fac <_svfiprintf_r+0x1f0>)
 8005f74:	a904      	add	r1, sp, #16
 8005f76:	4638      	mov	r0, r7
 8005f78:	f3af 8000 	nop.w
 8005f7c:	1c42      	adds	r2, r0, #1
 8005f7e:	4606      	mov	r6, r0
 8005f80:	d1d6      	bne.n	8005f30 <_svfiprintf_r+0x174>
 8005f82:	89ab      	ldrh	r3, [r5, #12]
 8005f84:	065b      	lsls	r3, r3, #25
 8005f86:	f53f af2d 	bmi.w	8005de4 <_svfiprintf_r+0x28>
 8005f8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f8c:	e72c      	b.n	8005de8 <_svfiprintf_r+0x2c>
 8005f8e:	ab03      	add	r3, sp, #12
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	462a      	mov	r2, r5
 8005f94:	4b05      	ldr	r3, [pc, #20]	@ (8005fac <_svfiprintf_r+0x1f0>)
 8005f96:	a904      	add	r1, sp, #16
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f000 f879 	bl	8006090 <_printf_i>
 8005f9e:	e7ed      	b.n	8005f7c <_svfiprintf_r+0x1c0>
 8005fa0:	08006400 	.word	0x08006400
 8005fa4:	0800640a 	.word	0x0800640a
 8005fa8:	00000000 	.word	0x00000000
 8005fac:	08005d05 	.word	0x08005d05
 8005fb0:	08006406 	.word	0x08006406

08005fb4 <_printf_common>:
 8005fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	4616      	mov	r6, r2
 8005fba:	4698      	mov	r8, r3
 8005fbc:	688a      	ldr	r2, [r1, #8]
 8005fbe:	690b      	ldr	r3, [r1, #16]
 8005fc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	bfb8      	it	lt
 8005fc8:	4613      	movlt	r3, r2
 8005fca:	6033      	str	r3, [r6, #0]
 8005fcc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005fd0:	4607      	mov	r7, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	b10a      	cbz	r2, 8005fda <_printf_common+0x26>
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	6033      	str	r3, [r6, #0]
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	0699      	lsls	r1, r3, #26
 8005fde:	bf42      	ittt	mi
 8005fe0:	6833      	ldrmi	r3, [r6, #0]
 8005fe2:	3302      	addmi	r3, #2
 8005fe4:	6033      	strmi	r3, [r6, #0]
 8005fe6:	6825      	ldr	r5, [r4, #0]
 8005fe8:	f015 0506 	ands.w	r5, r5, #6
 8005fec:	d106      	bne.n	8005ffc <_printf_common+0x48>
 8005fee:	f104 0a19 	add.w	sl, r4, #25
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	6832      	ldr	r2, [r6, #0]
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	42ab      	cmp	r3, r5
 8005ffa:	dc26      	bgt.n	800604a <_printf_common+0x96>
 8005ffc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006000:	6822      	ldr	r2, [r4, #0]
 8006002:	3b00      	subs	r3, #0
 8006004:	bf18      	it	ne
 8006006:	2301      	movne	r3, #1
 8006008:	0692      	lsls	r2, r2, #26
 800600a:	d42b      	bmi.n	8006064 <_printf_common+0xb0>
 800600c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006010:	4641      	mov	r1, r8
 8006012:	4638      	mov	r0, r7
 8006014:	47c8      	blx	r9
 8006016:	3001      	adds	r0, #1
 8006018:	d01e      	beq.n	8006058 <_printf_common+0xa4>
 800601a:	6823      	ldr	r3, [r4, #0]
 800601c:	6922      	ldr	r2, [r4, #16]
 800601e:	f003 0306 	and.w	r3, r3, #6
 8006022:	2b04      	cmp	r3, #4
 8006024:	bf02      	ittt	eq
 8006026:	68e5      	ldreq	r5, [r4, #12]
 8006028:	6833      	ldreq	r3, [r6, #0]
 800602a:	1aed      	subeq	r5, r5, r3
 800602c:	68a3      	ldr	r3, [r4, #8]
 800602e:	bf0c      	ite	eq
 8006030:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006034:	2500      	movne	r5, #0
 8006036:	4293      	cmp	r3, r2
 8006038:	bfc4      	itt	gt
 800603a:	1a9b      	subgt	r3, r3, r2
 800603c:	18ed      	addgt	r5, r5, r3
 800603e:	2600      	movs	r6, #0
 8006040:	341a      	adds	r4, #26
 8006042:	42b5      	cmp	r5, r6
 8006044:	d11a      	bne.n	800607c <_printf_common+0xc8>
 8006046:	2000      	movs	r0, #0
 8006048:	e008      	b.n	800605c <_printf_common+0xa8>
 800604a:	2301      	movs	r3, #1
 800604c:	4652      	mov	r2, sl
 800604e:	4641      	mov	r1, r8
 8006050:	4638      	mov	r0, r7
 8006052:	47c8      	blx	r9
 8006054:	3001      	adds	r0, #1
 8006056:	d103      	bne.n	8006060 <_printf_common+0xac>
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006060:	3501      	adds	r5, #1
 8006062:	e7c6      	b.n	8005ff2 <_printf_common+0x3e>
 8006064:	18e1      	adds	r1, r4, r3
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	2030      	movs	r0, #48	@ 0x30
 800606a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800606e:	4422      	add	r2, r4
 8006070:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006074:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006078:	3302      	adds	r3, #2
 800607a:	e7c7      	b.n	800600c <_printf_common+0x58>
 800607c:	2301      	movs	r3, #1
 800607e:	4622      	mov	r2, r4
 8006080:	4641      	mov	r1, r8
 8006082:	4638      	mov	r0, r7
 8006084:	47c8      	blx	r9
 8006086:	3001      	adds	r0, #1
 8006088:	d0e6      	beq.n	8006058 <_printf_common+0xa4>
 800608a:	3601      	adds	r6, #1
 800608c:	e7d9      	b.n	8006042 <_printf_common+0x8e>
	...

08006090 <_printf_i>:
 8006090:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006094:	7e0f      	ldrb	r7, [r1, #24]
 8006096:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006098:	2f78      	cmp	r7, #120	@ 0x78
 800609a:	4691      	mov	r9, r2
 800609c:	4680      	mov	r8, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	469a      	mov	sl, r3
 80060a2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060a6:	d807      	bhi.n	80060b8 <_printf_i+0x28>
 80060a8:	2f62      	cmp	r7, #98	@ 0x62
 80060aa:	d80a      	bhi.n	80060c2 <_printf_i+0x32>
 80060ac:	2f00      	cmp	r7, #0
 80060ae:	f000 80d2 	beq.w	8006256 <_printf_i+0x1c6>
 80060b2:	2f58      	cmp	r7, #88	@ 0x58
 80060b4:	f000 80b9 	beq.w	800622a <_printf_i+0x19a>
 80060b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060bc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060c0:	e03a      	b.n	8006138 <_printf_i+0xa8>
 80060c2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060c6:	2b15      	cmp	r3, #21
 80060c8:	d8f6      	bhi.n	80060b8 <_printf_i+0x28>
 80060ca:	a101      	add	r1, pc, #4	@ (adr r1, 80060d0 <_printf_i+0x40>)
 80060cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060d0:	08006129 	.word	0x08006129
 80060d4:	0800613d 	.word	0x0800613d
 80060d8:	080060b9 	.word	0x080060b9
 80060dc:	080060b9 	.word	0x080060b9
 80060e0:	080060b9 	.word	0x080060b9
 80060e4:	080060b9 	.word	0x080060b9
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080060b9 	.word	0x080060b9
 80060f0:	080060b9 	.word	0x080060b9
 80060f4:	080060b9 	.word	0x080060b9
 80060f8:	080060b9 	.word	0x080060b9
 80060fc:	0800623d 	.word	0x0800623d
 8006100:	08006167 	.word	0x08006167
 8006104:	080061f7 	.word	0x080061f7
 8006108:	080060b9 	.word	0x080060b9
 800610c:	080060b9 	.word	0x080060b9
 8006110:	0800625f 	.word	0x0800625f
 8006114:	080060b9 	.word	0x080060b9
 8006118:	08006167 	.word	0x08006167
 800611c:	080060b9 	.word	0x080060b9
 8006120:	080060b9 	.word	0x080060b9
 8006124:	080061ff 	.word	0x080061ff
 8006128:	6833      	ldr	r3, [r6, #0]
 800612a:	1d1a      	adds	r2, r3, #4
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6032      	str	r2, [r6, #0]
 8006130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006134:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006138:	2301      	movs	r3, #1
 800613a:	e09d      	b.n	8006278 <_printf_i+0x1e8>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6820      	ldr	r0, [r4, #0]
 8006140:	1d19      	adds	r1, r3, #4
 8006142:	6031      	str	r1, [r6, #0]
 8006144:	0606      	lsls	r6, r0, #24
 8006146:	d501      	bpl.n	800614c <_printf_i+0xbc>
 8006148:	681d      	ldr	r5, [r3, #0]
 800614a:	e003      	b.n	8006154 <_printf_i+0xc4>
 800614c:	0645      	lsls	r5, r0, #25
 800614e:	d5fb      	bpl.n	8006148 <_printf_i+0xb8>
 8006150:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006154:	2d00      	cmp	r5, #0
 8006156:	da03      	bge.n	8006160 <_printf_i+0xd0>
 8006158:	232d      	movs	r3, #45	@ 0x2d
 800615a:	426d      	negs	r5, r5
 800615c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006160:	4859      	ldr	r0, [pc, #356]	@ (80062c8 <_printf_i+0x238>)
 8006162:	230a      	movs	r3, #10
 8006164:	e011      	b.n	800618a <_printf_i+0xfa>
 8006166:	6821      	ldr	r1, [r4, #0]
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	0608      	lsls	r0, r1, #24
 800616c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006170:	d402      	bmi.n	8006178 <_printf_i+0xe8>
 8006172:	0649      	lsls	r1, r1, #25
 8006174:	bf48      	it	mi
 8006176:	b2ad      	uxthmi	r5, r5
 8006178:	2f6f      	cmp	r7, #111	@ 0x6f
 800617a:	4853      	ldr	r0, [pc, #332]	@ (80062c8 <_printf_i+0x238>)
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	bf14      	ite	ne
 8006180:	230a      	movne	r3, #10
 8006182:	2308      	moveq	r3, #8
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800618a:	6866      	ldr	r6, [r4, #4]
 800618c:	60a6      	str	r6, [r4, #8]
 800618e:	2e00      	cmp	r6, #0
 8006190:	bfa2      	ittt	ge
 8006192:	6821      	ldrge	r1, [r4, #0]
 8006194:	f021 0104 	bicge.w	r1, r1, #4
 8006198:	6021      	strge	r1, [r4, #0]
 800619a:	b90d      	cbnz	r5, 80061a0 <_printf_i+0x110>
 800619c:	2e00      	cmp	r6, #0
 800619e:	d04b      	beq.n	8006238 <_printf_i+0x1a8>
 80061a0:	4616      	mov	r6, r2
 80061a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80061a6:	fb03 5711 	mls	r7, r3, r1, r5
 80061aa:	5dc7      	ldrb	r7, [r0, r7]
 80061ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061b0:	462f      	mov	r7, r5
 80061b2:	42bb      	cmp	r3, r7
 80061b4:	460d      	mov	r5, r1
 80061b6:	d9f4      	bls.n	80061a2 <_printf_i+0x112>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d10b      	bne.n	80061d4 <_printf_i+0x144>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07df      	lsls	r7, r3, #31
 80061c0:	d508      	bpl.n	80061d4 <_printf_i+0x144>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	4299      	cmp	r1, r3
 80061c8:	bfde      	ittt	le
 80061ca:	2330      	movle	r3, #48	@ 0x30
 80061cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061d4:	1b92      	subs	r2, r2, r6
 80061d6:	6122      	str	r2, [r4, #16]
 80061d8:	f8cd a000 	str.w	sl, [sp]
 80061dc:	464b      	mov	r3, r9
 80061de:	aa03      	add	r2, sp, #12
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fee6 	bl	8005fb4 <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d14a      	bne.n	8006282 <_printf_i+0x1f2>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	b004      	add	sp, #16
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f043 0320 	orr.w	r3, r3, #32
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	4833      	ldr	r0, [pc, #204]	@ (80062cc <_printf_i+0x23c>)
 8006200:	2778      	movs	r7, #120	@ 0x78
 8006202:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	6831      	ldr	r1, [r6, #0]
 800620a:	061f      	lsls	r7, r3, #24
 800620c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006210:	d402      	bmi.n	8006218 <_printf_i+0x188>
 8006212:	065f      	lsls	r7, r3, #25
 8006214:	bf48      	it	mi
 8006216:	b2ad      	uxthmi	r5, r5
 8006218:	6031      	str	r1, [r6, #0]
 800621a:	07d9      	lsls	r1, r3, #31
 800621c:	bf44      	itt	mi
 800621e:	f043 0320 	orrmi.w	r3, r3, #32
 8006222:	6023      	strmi	r3, [r4, #0]
 8006224:	b11d      	cbz	r5, 800622e <_printf_i+0x19e>
 8006226:	2310      	movs	r3, #16
 8006228:	e7ac      	b.n	8006184 <_printf_i+0xf4>
 800622a:	4827      	ldr	r0, [pc, #156]	@ (80062c8 <_printf_i+0x238>)
 800622c:	e7e9      	b.n	8006202 <_printf_i+0x172>
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	f023 0320 	bic.w	r3, r3, #32
 8006234:	6023      	str	r3, [r4, #0]
 8006236:	e7f6      	b.n	8006226 <_printf_i+0x196>
 8006238:	4616      	mov	r6, r2
 800623a:	e7bd      	b.n	80061b8 <_printf_i+0x128>
 800623c:	6833      	ldr	r3, [r6, #0]
 800623e:	6825      	ldr	r5, [r4, #0]
 8006240:	6961      	ldr	r1, [r4, #20]
 8006242:	1d18      	adds	r0, r3, #4
 8006244:	6030      	str	r0, [r6, #0]
 8006246:	062e      	lsls	r6, r5, #24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	d501      	bpl.n	8006250 <_printf_i+0x1c0>
 800624c:	6019      	str	r1, [r3, #0]
 800624e:	e002      	b.n	8006256 <_printf_i+0x1c6>
 8006250:	0668      	lsls	r0, r5, #25
 8006252:	d5fb      	bpl.n	800624c <_printf_i+0x1bc>
 8006254:	8019      	strh	r1, [r3, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	4616      	mov	r6, r2
 800625c:	e7bc      	b.n	80061d8 <_printf_i+0x148>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	6032      	str	r2, [r6, #0]
 8006264:	681e      	ldr	r6, [r3, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	4630      	mov	r0, r6
 800626c:	f7f9 ffc0 	bl	80001f0 <memchr>
 8006270:	b108      	cbz	r0, 8006276 <_printf_i+0x1e6>
 8006272:	1b80      	subs	r0, r0, r6
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006280:	e7aa      	b.n	80061d8 <_printf_i+0x148>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	4632      	mov	r2, r6
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d0ad      	beq.n	80061ec <_printf_i+0x15c>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	d413      	bmi.n	80062be <_printf_i+0x22e>
 8006296:	68e0      	ldr	r0, [r4, #12]
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	4298      	cmp	r0, r3
 800629c:	bfb8      	it	lt
 800629e:	4618      	movlt	r0, r3
 80062a0:	e7a6      	b.n	80061f0 <_printf_i+0x160>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d09d      	beq.n	80061ec <_printf_i+0x15c>
 80062b0:	3501      	adds	r5, #1
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	9903      	ldr	r1, [sp, #12]
 80062b6:	1a5b      	subs	r3, r3, r1
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dcf2      	bgt.n	80062a2 <_printf_i+0x212>
 80062bc:	e7eb      	b.n	8006296 <_printf_i+0x206>
 80062be:	2500      	movs	r5, #0
 80062c0:	f104 0619 	add.w	r6, r4, #25
 80062c4:	e7f5      	b.n	80062b2 <_printf_i+0x222>
 80062c6:	bf00      	nop
 80062c8:	08006411 	.word	0x08006411
 80062cc:	08006422 	.word	0x08006422

080062d0 <memmove>:
 80062d0:	4288      	cmp	r0, r1
 80062d2:	b510      	push	{r4, lr}
 80062d4:	eb01 0402 	add.w	r4, r1, r2
 80062d8:	d902      	bls.n	80062e0 <memmove+0x10>
 80062da:	4284      	cmp	r4, r0
 80062dc:	4623      	mov	r3, r4
 80062de:	d807      	bhi.n	80062f0 <memmove+0x20>
 80062e0:	1e43      	subs	r3, r0, #1
 80062e2:	42a1      	cmp	r1, r4
 80062e4:	d008      	beq.n	80062f8 <memmove+0x28>
 80062e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ee:	e7f8      	b.n	80062e2 <memmove+0x12>
 80062f0:	4402      	add	r2, r0
 80062f2:	4601      	mov	r1, r0
 80062f4:	428a      	cmp	r2, r1
 80062f6:	d100      	bne.n	80062fa <memmove+0x2a>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006302:	e7f7      	b.n	80062f4 <memmove+0x24>

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	@ (8006320 <_sbrk_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fb ff32 	bl	8002178 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	200004c4 	.word	0x200004c4

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <_realloc_r>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	4680      	mov	r8, r0
 8006346:	4615      	mov	r5, r2
 8006348:	460c      	mov	r4, r1
 800634a:	b921      	cbnz	r1, 8006356 <_realloc_r+0x16>
 800634c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	4611      	mov	r1, r2
 8006352:	f7ff bc4b 	b.w	8005bec <_malloc_r>
 8006356:	b92a      	cbnz	r2, 8006364 <_realloc_r+0x24>
 8006358:	f7ff fbdc 	bl	8005b14 <_free_r>
 800635c:	2400      	movs	r4, #0
 800635e:	4620      	mov	r0, r4
 8006360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006364:	f000 f81a 	bl	800639c <_malloc_usable_size_r>
 8006368:	4285      	cmp	r5, r0
 800636a:	4606      	mov	r6, r0
 800636c:	d802      	bhi.n	8006374 <_realloc_r+0x34>
 800636e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006372:	d8f4      	bhi.n	800635e <_realloc_r+0x1e>
 8006374:	4629      	mov	r1, r5
 8006376:	4640      	mov	r0, r8
 8006378:	f7ff fc38 	bl	8005bec <_malloc_r>
 800637c:	4607      	mov	r7, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d0ec      	beq.n	800635c <_realloc_r+0x1c>
 8006382:	42b5      	cmp	r5, r6
 8006384:	462a      	mov	r2, r5
 8006386:	4621      	mov	r1, r4
 8006388:	bf28      	it	cs
 800638a:	4632      	movcs	r2, r6
 800638c:	f7ff ffca 	bl	8006324 <memcpy>
 8006390:	4621      	mov	r1, r4
 8006392:	4640      	mov	r0, r8
 8006394:	f7ff fbbe 	bl	8005b14 <_free_r>
 8006398:	463c      	mov	r4, r7
 800639a:	e7e0      	b.n	800635e <_realloc_r+0x1e>

0800639c <_malloc_usable_size_r>:
 800639c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a0:	1f18      	subs	r0, r3, #4
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	bfbc      	itt	lt
 80063a6:	580b      	ldrlt	r3, [r1, r0]
 80063a8:	18c0      	addlt	r0, r0, r3
 80063aa:	4770      	bx	lr

080063ac <_init>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr

080063b8 <_fini>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr
